// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo_fay.premium_segment_0_1;

import routines.DataOperation;
import routines.DqStringHandling;
import routines.GetRandomPhoneNum;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MDM;
import routines.DQTechnical;
import routines.Mathematical;
import routines.Relational;
import routines.DemoRoutines;
import routines.TalendDate;
import routines.SQLike;
import routines.DataQuality;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: premium_segment Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class premium_segment implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (log_id != null) {

				this.setProperty("log_id", log_id.toString());

			}

		}

		public Integer log_id;

		public Integer getLog_id() {
			return this.log_id;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "premium_segment";
	private final String projectName = "DEMO_FAY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					premium_segment.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(premium_segment.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "items";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;
				int batchSize_tMysqlOutput_1 = 10000;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String update_tMysqlOutput_1 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` IN ('Small Low', 'Small High')";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.id = rs_tMysqlInput_1.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.year = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(2) != null) {
								row1.year = rs_tMysqlInput_1.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.month = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(3) != null) {
								row1.month = rs_tMysqlInput_1.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.city = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.city = tmpContent_tMysqlInput_1;
							} else {
								row1.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.group = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(5);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.group = tmpContent_tMysqlInput_1;
							} else {
								row1.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.make = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(6);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.make = tmpContent_tMysqlInput_1;
							} else {
								row1.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(7);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.premium_segment = tmpContent_tMysqlInput_1;
							} else {
								row1.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(8);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.model_gnr = tmpContent_tMysqlInput_1;
							} else {
								row1.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.model = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(9);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.model = tmpContent_tMysqlInput_1;
							} else {
								row1.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.segment = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(10);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.segment = tmpContent_tMysqlInput_1;
							} else {
								row1.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(11);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.ckd_cbu = tmpContent_tMysqlInput_1;
							} else {
								row1.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 12) {
							row1.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(12);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.pc_cv = tmpContent_tMysqlInput_1;
							} else {
								row1.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 13) {
							row1.engine_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(13);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.engine_type = tmpContent_tMysqlInput_1;
							} else {
								row1.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 14) {
							row1.type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(14);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.type = tmpContent_tMysqlInput_1;
							} else {
								row1.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 15) {
							row1.displacement = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(15) != null) {
								row1.displacement = rs_tMysqlInput_1.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 16) {
							row1.sales = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(16) != null) {
								row1.sales = rs_tMysqlInput_1.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 17) {
							row1.origine = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(17);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.origine = tmpContent_tMysqlInput_1;
							} else {
								row1.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 18) {
							row1.body_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(18);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.body_type = tmpContent_tMysqlInput_1;
							} else {
								row1.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 19) {
							row1.rsp = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(19) != null) {
								row1.rsp = rs_tMysqlInput_1.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 20) {
							row1.suv_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(20);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.suv_type = tmpContent_tMysqlInput_1;
							} else {
								row1.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 21) {
							row1.price_class = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(21);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.price_class = tmpContent_tMysqlInput_1;
							} else {
								row1.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 22) {
							row1.log_id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(22) != null) {
								row1.log_id = rs_tMysqlInput_1.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 23) {
							row1.type_vh = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(23);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.type_vh = tmpContent_tMysqlInput_1;
							} else {
								row1.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 24) {
							row1.status = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(24);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.status = tmpContent_tMysqlInput_1;
							} else {
								row1.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 25) {
							row1.created_at = null;
						} else {

							if (rs_tMysqlInput_1.getObject(25) != null) {
								row1.created_at = rs_tMysqlInput_1.getInt(25);
							} else {
								row1.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 26) {
							row1.updated_at = null;
						} else {

							if (rs_tMysqlInput_1.getObject(26) != null) {
								row1.updated_at = rs_tMysqlInput_1.getInt(26);
							} else {
								row1.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */
						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							// # Output table : 'out1'
							out1_tmp.id = row1.id;
							out1_tmp.year = row1.year;
							out1_tmp.month = row1.month;
							out1_tmp.city = row1.city;
							out1_tmp.group = row1.group;
							out1_tmp.make = row1.make;
							out1_tmp.premium_segment = "Premium Compact	";
							out1_tmp.model_gnr = row1.model_gnr;
							out1_tmp.model = row1.model;
							out1_tmp.segment = row1.segment;
							out1_tmp.ckd_cbu = row1.ckd_cbu;
							out1_tmp.pc_cv = row1.pc_cv;
							out1_tmp.engine_type = row1.engine_type;
							out1_tmp.type = row1.type;
							out1_tmp.displacement = row1.displacement;
							out1_tmp.sales = row1.sales;
							out1_tmp.origine = row1.origine;
							out1_tmp.body_type = row1.body_type;
							out1_tmp.rsp = row1.rsp;
							out1_tmp.suv_type = row1.suv_type;
							out1_tmp.price_class = row1.price_class;
							out1_tmp.log_id = row1.log_id;
							out1_tmp.type_vh = row1.type_vh;
							out1_tmp.status = row1.status;
							out1_tmp.created_at = null;
							out1_tmp.updated_at = null;
							out1 = out1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setInt(1, out1.year);

							pstmt_tMysqlOutput_1.setInt(2, out1.month);

							if (out1.city == null) {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(3, out1.city);
							}

							if (out1.group == null) {
								pstmt_tMysqlOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(4, out1.group);
							}

							if (out1.make == null) {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(5, out1.make);
							}

							if (out1.premium_segment == null) {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(6,
										out1.premium_segment);
							}

							if (out1.model_gnr == null) {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(7,
										out1.model_gnr);
							}

							if (out1.model == null) {
								pstmt_tMysqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(8, out1.model);
							}

							if (out1.segment == null) {
								pstmt_tMysqlOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(9, out1.segment);
							}

							if (out1.ckd_cbu == null) {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(10, out1.ckd_cbu);
							}

							if (out1.pc_cv == null) {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(11, out1.pc_cv);
							}

							if (out1.engine_type == null) {
								pstmt_tMysqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(12,
										out1.engine_type);
							}

							if (out1.type == null) {
								pstmt_tMysqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(13, out1.type);
							}

							pstmt_tMysqlOutput_1.setInt(14, out1.displacement);

							pstmt_tMysqlOutput_1.setInt(15, out1.sales);

							if (out1.origine == null) {
								pstmt_tMysqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(16, out1.origine);
							}

							if (out1.body_type == null) {
								pstmt_tMysqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(17,
										out1.body_type);
							}

							pstmt_tMysqlOutput_1.setInt(18, out1.rsp);

							if (out1.suv_type == null) {
								pstmt_tMysqlOutput_1.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(19,
										out1.suv_type);
							}

							if (out1.price_class == null) {
								pstmt_tMysqlOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(20,
										out1.price_class);
							}

							pstmt_tMysqlOutput_1.setInt(21, out1.log_id);

							if (out1.type_vh == null) {
								pstmt_tMysqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(22, out1.type_vh);
							}

							if (out1.status == null) {
								pstmt_tMysqlOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(23, out1.status);
							}

							if (out1.created_at == null) {
								pstmt_tMysqlOutput_1.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(24, out1.created_at);
							}

							if (out1.updated_at == null) {
								pstmt_tMysqlOutput_1.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(25, out1.updated_at);
							}

							pstmt_tMysqlOutput_1.setLong(
									26 + count_tMysqlOutput_1, out1.id);

							pstmt_tMysqlOutput_1.addBatch();
							nb_line_tMysqlOutput_1++;

							batchSizeCounter_tMysqlOutput_1++;

							if (!whetherReject_tMysqlOutput_1) {
							}
							if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									batchSizeCounter_tMysqlOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								try {
									int countSum_tMysqlOutput_1 = 0;

									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_1.commit();

								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;

						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();
				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;
				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				tMysqlInput_2Process(globalMap);

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							System.out
									.println("failed to close the connection in tMysqlOutput_1 :"
											+ sqlEx_tMysqlOutput_1.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfout1Struct other = (copyOfout1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfout1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfout1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int updateKeyCount_tMysqlOutput_2 = 1;
				if (updateKeyCount_tMysqlOutput_2 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "items";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_2;
				}
				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;
				int batchSize_tMysqlOutput_2 = 10000;
				int batchSizeCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String update_tMysqlOutput_2 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(update_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_2 = "root";

				final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'Sport'";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);
				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row2.id = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(1) != null) {
								row2.id = rs_tMysqlInput_2.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 2) {
							row2.year = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(2) != null) {
								row2.year = rs_tMysqlInput_2.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 3) {
							row2.month = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(3) != null) {
								row2.month = rs_tMysqlInput_2.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 4) {
							row2.city = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(4);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.city = tmpContent_tMysqlInput_2;
							} else {
								row2.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 5) {
							row2.group = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(5);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.group = tmpContent_tMysqlInput_2;
							} else {
								row2.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 6) {
							row2.make = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(6);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.make = tmpContent_tMysqlInput_2;
							} else {
								row2.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 7) {
							row2.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(7);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.premium_segment = tmpContent_tMysqlInput_2;
							} else {
								row2.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 8) {
							row2.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(8);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.model_gnr = tmpContent_tMysqlInput_2;
							} else {
								row2.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 9) {
							row2.model = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(9);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.model = tmpContent_tMysqlInput_2;
							} else {
								row2.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 10) {
							row2.segment = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(10);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.segment = tmpContent_tMysqlInput_2;
							} else {
								row2.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 11) {
							row2.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(11);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.ckd_cbu = tmpContent_tMysqlInput_2;
							} else {
								row2.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 12) {
							row2.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(12);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.pc_cv = tmpContent_tMysqlInput_2;
							} else {
								row2.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 13) {
							row2.engine_type = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(13);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.engine_type = tmpContent_tMysqlInput_2;
							} else {
								row2.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 14) {
							row2.type = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(14);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.type = tmpContent_tMysqlInput_2;
							} else {
								row2.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 15) {
							row2.displacement = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(15) != null) {
								row2.displacement = rs_tMysqlInput_2.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 16) {
							row2.sales = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(16) != null) {
								row2.sales = rs_tMysqlInput_2.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 17) {
							row2.origine = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(17);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.origine = tmpContent_tMysqlInput_2;
							} else {
								row2.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 18) {
							row2.body_type = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(18);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.body_type = tmpContent_tMysqlInput_2;
							} else {
								row2.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 19) {
							row2.rsp = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(19) != null) {
								row2.rsp = rs_tMysqlInput_2.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 20) {
							row2.suv_type = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(20);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.suv_type = tmpContent_tMysqlInput_2;
							} else {
								row2.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 21) {
							row2.price_class = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(21);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.price_class = tmpContent_tMysqlInput_2;
							} else {
								row2.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 22) {
							row2.log_id = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(22) != null) {
								row2.log_id = rs_tMysqlInput_2.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 23) {
							row2.type_vh = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(23);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.type_vh = tmpContent_tMysqlInput_2;
							} else {
								row2.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 24) {
							row2.status = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(24);
							if (tmpContent_tMysqlInput_2 != null) {
								row2.status = tmpContent_tMysqlInput_2;
							} else {
								row2.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 25) {
							row2.created_at = null;
						} else {

							if (rs_tMysqlInput_2.getObject(25) != null) {
								row2.created_at = rs_tMysqlInput_2.getInt(25);
							} else {
								row2.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_2 < 26) {
							row2.updated_at = null;
						} else {

							if (rs_tMysqlInput_2.getObject(26) != null) {
								row2.updated_at = rs_tMysqlInput_2.getInt(26);
							} else {
								row2.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */
						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							copyOfout1 = null;

							// # Output table : 'copyOfout1'
							copyOfout1_tmp.id = row2.id;
							copyOfout1_tmp.year = row2.year;
							copyOfout1_tmp.month = row2.month;
							copyOfout1_tmp.city = row2.city;
							copyOfout1_tmp.group = row2.group;
							copyOfout1_tmp.make = row2.make;
							copyOfout1_tmp.premium_segment = "Premium Sport";
							copyOfout1_tmp.model_gnr = row2.model_gnr;
							copyOfout1_tmp.model = row2.model;
							copyOfout1_tmp.segment = row2.segment;
							copyOfout1_tmp.ckd_cbu = row2.ckd_cbu;
							copyOfout1_tmp.pc_cv = row2.pc_cv;
							copyOfout1_tmp.engine_type = row2.engine_type;
							copyOfout1_tmp.type = row2.type;
							copyOfout1_tmp.displacement = row2.displacement;
							copyOfout1_tmp.sales = row2.sales;
							copyOfout1_tmp.origine = row2.origine;
							copyOfout1_tmp.body_type = row2.body_type;
							copyOfout1_tmp.rsp = row2.rsp;
							copyOfout1_tmp.suv_type = row2.suv_type;
							copyOfout1_tmp.price_class = row2.price_class;
							copyOfout1_tmp.log_id = row2.log_id;
							copyOfout1_tmp.type_vh = row2.type_vh;
							copyOfout1_tmp.status = row2.status;
							copyOfout1_tmp.created_at = null;
							copyOfout1_tmp.updated_at = null;
							copyOfout1 = copyOfout1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "copyOfout1"
						if (copyOfout1 != null) {

							/**
							 * [tMysqlOutput_2 main ] start
							 */

							currentComponent = "tMysqlOutput_2";

							whetherReject_tMysqlOutput_2 = false;
							pstmt_tMysqlOutput_2.setInt(1, copyOfout1.year);

							pstmt_tMysqlOutput_2.setInt(2, copyOfout1.month);

							if (copyOfout1.city == null) {
								pstmt_tMysqlOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(3,
										copyOfout1.city);
							}

							if (copyOfout1.group == null) {
								pstmt_tMysqlOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(4,
										copyOfout1.group);
							}

							if (copyOfout1.make == null) {
								pstmt_tMysqlOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(5,
										copyOfout1.make);
							}

							if (copyOfout1.premium_segment == null) {
								pstmt_tMysqlOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(6,
										copyOfout1.premium_segment);
							}

							if (copyOfout1.model_gnr == null) {
								pstmt_tMysqlOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(7,
										copyOfout1.model_gnr);
							}

							if (copyOfout1.model == null) {
								pstmt_tMysqlOutput_2.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(8,
										copyOfout1.model);
							}

							if (copyOfout1.segment == null) {
								pstmt_tMysqlOutput_2.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(9,
										copyOfout1.segment);
							}

							if (copyOfout1.ckd_cbu == null) {
								pstmt_tMysqlOutput_2.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(10,
										copyOfout1.ckd_cbu);
							}

							if (copyOfout1.pc_cv == null) {
								pstmt_tMysqlOutput_2.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(11,
										copyOfout1.pc_cv);
							}

							if (copyOfout1.engine_type == null) {
								pstmt_tMysqlOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(12,
										copyOfout1.engine_type);
							}

							if (copyOfout1.type == null) {
								pstmt_tMysqlOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(13,
										copyOfout1.type);
							}

							pstmt_tMysqlOutput_2.setInt(14,
									copyOfout1.displacement);

							pstmt_tMysqlOutput_2.setInt(15, copyOfout1.sales);

							if (copyOfout1.origine == null) {
								pstmt_tMysqlOutput_2.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(16,
										copyOfout1.origine);
							}

							if (copyOfout1.body_type == null) {
								pstmt_tMysqlOutput_2.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(17,
										copyOfout1.body_type);
							}

							pstmt_tMysqlOutput_2.setInt(18, copyOfout1.rsp);

							if (copyOfout1.suv_type == null) {
								pstmt_tMysqlOutput_2.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(19,
										copyOfout1.suv_type);
							}

							if (copyOfout1.price_class == null) {
								pstmt_tMysqlOutput_2.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(20,
										copyOfout1.price_class);
							}

							pstmt_tMysqlOutput_2.setInt(21, copyOfout1.log_id);

							if (copyOfout1.type_vh == null) {
								pstmt_tMysqlOutput_2.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(22,
										copyOfout1.type_vh);
							}

							if (copyOfout1.status == null) {
								pstmt_tMysqlOutput_2.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(23,
										copyOfout1.status);
							}

							if (copyOfout1.created_at == null) {
								pstmt_tMysqlOutput_2.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(24,
										copyOfout1.created_at);
							}

							if (copyOfout1.updated_at == null) {
								pstmt_tMysqlOutput_2.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(25,
										copyOfout1.updated_at);
							}

							pstmt_tMysqlOutput_2.setLong(
									26 + count_tMysqlOutput_2, copyOfout1.id);

							pstmt_tMysqlOutput_2.addBatch();
							nb_line_tMysqlOutput_2++;

							batchSizeCounter_tMysqlOutput_2++;

							if (!whetherReject_tMysqlOutput_2) {
							}
							if (batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
								try {
									int countSum_tMysqlOutput_2 = 0;
									for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
											.executeBatch()) {
										countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
												: countEach_tMysqlOutput_2);
									}

									updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

									batchSizeCounter_tMysqlOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_2 = 0;
									for (int countEach_tMysqlOutput_2 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
												: countEach_tMysqlOutput_2);
									}

									updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_2++;

							if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

								try {
									int countSum_tMysqlOutput_2 = 0;

									for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
											.executeBatch()) {
										countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
												: countEach_tMysqlOutput_2);
									}

									updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_2 = 0;
									for (int countEach_tMysqlOutput_2 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
												: countEach_tMysqlOutput_2);
									}

									updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_2.commit();

								commitCounter_tMysqlOutput_2 = 0;

							}

							tos_count_tMysqlOutput_2++;

							/**
							 * [tMysqlOutput_2 main ] stop
							 */

						} // End of branch "copyOfout1"

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					stmt_tMysqlInput_2.close();

					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {
						conn_tMysqlInput_2.close();
					}

				}
				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (pstmt_tMysqlOutput_2 != null) {
						int countSum_tMysqlOutput_2 = 0;

						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: countEach_tMysqlOutput_2);
						}

						updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();
				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;
				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				tMysqlInput_3Process(globalMap);

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							System.out
									.println("failed to close the connection in tMysqlOutput_2 :"
											+ sqlEx_tMysqlOutput_2.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1_0Struct implements
			routines.system.IPersistableRow<copyOfout1_0Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfout1_0Struct other = (copyOfout1_0Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfout1_0Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfout1_0Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfout1_0Struct copyOfout1_0 = new copyOfout1_0Struct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				int updateKeyCount_tMysqlOutput_3 = 1;
				if (updateKeyCount_tMysqlOutput_3 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "items";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_3;
				}
				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;
				int batchSize_tMysqlOutput_3 = 10000;
				int batchSizeCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				String update_tMysqlOutput_3 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(update_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1_0Struct copyOfout1_0_tmp = new copyOfout1_0Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_3 = "root";

				final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;

				String url_tMysqlInput_3 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'Medium'";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);
				java.sql.ResultSet rs_tMysqlInput_3 = null;
				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3
							.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
							.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
							.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						if (colQtyInRs_tMysqlInput_3 < 1) {
							row3.id = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(1) != null) {
								row3.id = rs_tMysqlInput_3.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 2) {
							row3.year = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(2) != null) {
								row3.year = rs_tMysqlInput_3.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 3) {
							row3.month = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(3) != null) {
								row3.month = rs_tMysqlInput_3.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 4) {
							row3.city = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(4);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.city = tmpContent_tMysqlInput_3;
							} else {
								row3.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 5) {
							row3.group = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(5);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.group = tmpContent_tMysqlInput_3;
							} else {
								row3.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 6) {
							row3.make = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(6);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.make = tmpContent_tMysqlInput_3;
							} else {
								row3.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 7) {
							row3.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(7);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.premium_segment = tmpContent_tMysqlInput_3;
							} else {
								row3.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 8) {
							row3.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(8);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.model_gnr = tmpContent_tMysqlInput_3;
							} else {
								row3.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 9) {
							row3.model = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(9);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.model = tmpContent_tMysqlInput_3;
							} else {
								row3.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 10) {
							row3.segment = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(10);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.segment = tmpContent_tMysqlInput_3;
							} else {
								row3.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 11) {
							row3.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(11);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.ckd_cbu = tmpContent_tMysqlInput_3;
							} else {
								row3.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 12) {
							row3.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(12);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.pc_cv = tmpContent_tMysqlInput_3;
							} else {
								row3.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 13) {
							row3.engine_type = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(13);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.engine_type = tmpContent_tMysqlInput_3;
							} else {
								row3.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 14) {
							row3.type = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(14);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.type = tmpContent_tMysqlInput_3;
							} else {
								row3.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 15) {
							row3.displacement = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(15) != null) {
								row3.displacement = rs_tMysqlInput_3.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 16) {
							row3.sales = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(16) != null) {
								row3.sales = rs_tMysqlInput_3.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 17) {
							row3.origine = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(17);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.origine = tmpContent_tMysqlInput_3;
							} else {
								row3.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 18) {
							row3.body_type = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(18);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.body_type = tmpContent_tMysqlInput_3;
							} else {
								row3.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 19) {
							row3.rsp = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(19) != null) {
								row3.rsp = rs_tMysqlInput_3.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 20) {
							row3.suv_type = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(20);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.suv_type = tmpContent_tMysqlInput_3;
							} else {
								row3.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 21) {
							row3.price_class = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(21);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.price_class = tmpContent_tMysqlInput_3;
							} else {
								row3.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 22) {
							row3.log_id = 0;
						} else {

							if (rs_tMysqlInput_3.getObject(22) != null) {
								row3.log_id = rs_tMysqlInput_3.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 23) {
							row3.type_vh = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(23);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.type_vh = tmpContent_tMysqlInput_3;
							} else {
								row3.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 24) {
							row3.status = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(24);
							if (tmpContent_tMysqlInput_3 != null) {
								row3.status = tmpContent_tMysqlInput_3;
							} else {
								row3.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 25) {
							row3.created_at = null;
						} else {

							if (rs_tMysqlInput_3.getObject(25) != null) {
								row3.created_at = rs_tMysqlInput_3.getInt(25);
							} else {
								row3.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_3 < 26) {
							row3.updated_at = null;
						} else {

							if (rs_tMysqlInput_3.getObject(26) != null) {
								row3.updated_at = rs_tMysqlInput_3.getInt(26);
							} else {
								row3.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */
						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							copyOfout1_0 = null;

							// # Output table : 'copyOfout1_0'
							copyOfout1_0_tmp.id = row3.id;
							copyOfout1_0_tmp.year = row3.year;
							copyOfout1_0_tmp.month = row3.month;
							copyOfout1_0_tmp.city = row3.city;
							copyOfout1_0_tmp.group = row3.group;
							copyOfout1_0_tmp.make = row3.make;
							copyOfout1_0_tmp.premium_segment = "Premium medium";
							copyOfout1_0_tmp.model_gnr = row3.model_gnr;
							copyOfout1_0_tmp.model = row3.model;
							copyOfout1_0_tmp.segment = row3.segment;
							copyOfout1_0_tmp.ckd_cbu = row3.ckd_cbu;
							copyOfout1_0_tmp.pc_cv = row3.pc_cv;
							copyOfout1_0_tmp.engine_type = row3.engine_type;
							copyOfout1_0_tmp.type = row3.type;
							copyOfout1_0_tmp.displacement = row3.displacement;
							copyOfout1_0_tmp.sales = row3.sales;
							copyOfout1_0_tmp.origine = row3.origine;
							copyOfout1_0_tmp.body_type = row3.body_type;
							copyOfout1_0_tmp.rsp = row3.rsp;
							copyOfout1_0_tmp.suv_type = row3.suv_type;
							copyOfout1_0_tmp.price_class = row3.price_class;
							copyOfout1_0_tmp.log_id = row3.log_id;
							copyOfout1_0_tmp.type_vh = row3.type_vh;
							copyOfout1_0_tmp.status = row3.status;
							copyOfout1_0_tmp.created_at = null;
							copyOfout1_0_tmp.updated_at = null;
							copyOfout1_0 = copyOfout1_0_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "copyOfout1_0"
						if (copyOfout1_0 != null) {

							/**
							 * [tMysqlOutput_3 main ] start
							 */

							currentComponent = "tMysqlOutput_3";

							whetherReject_tMysqlOutput_3 = false;
							pstmt_tMysqlOutput_3.setInt(1, copyOfout1_0.year);

							pstmt_tMysqlOutput_3.setInt(2, copyOfout1_0.month);

							if (copyOfout1_0.city == null) {
								pstmt_tMysqlOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(3,
										copyOfout1_0.city);
							}

							if (copyOfout1_0.group == null) {
								pstmt_tMysqlOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(4,
										copyOfout1_0.group);
							}

							if (copyOfout1_0.make == null) {
								pstmt_tMysqlOutput_3.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(5,
										copyOfout1_0.make);
							}

							if (copyOfout1_0.premium_segment == null) {
								pstmt_tMysqlOutput_3.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(6,
										copyOfout1_0.premium_segment);
							}

							if (copyOfout1_0.model_gnr == null) {
								pstmt_tMysqlOutput_3.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(7,
										copyOfout1_0.model_gnr);
							}

							if (copyOfout1_0.model == null) {
								pstmt_tMysqlOutput_3.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(8,
										copyOfout1_0.model);
							}

							if (copyOfout1_0.segment == null) {
								pstmt_tMysqlOutput_3.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(9,
										copyOfout1_0.segment);
							}

							if (copyOfout1_0.ckd_cbu == null) {
								pstmt_tMysqlOutput_3.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(10,
										copyOfout1_0.ckd_cbu);
							}

							if (copyOfout1_0.pc_cv == null) {
								pstmt_tMysqlOutput_3.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(11,
										copyOfout1_0.pc_cv);
							}

							if (copyOfout1_0.engine_type == null) {
								pstmt_tMysqlOutput_3.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(12,
										copyOfout1_0.engine_type);
							}

							if (copyOfout1_0.type == null) {
								pstmt_tMysqlOutput_3.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(13,
										copyOfout1_0.type);
							}

							pstmt_tMysqlOutput_3.setInt(14,
									copyOfout1_0.displacement);

							pstmt_tMysqlOutput_3.setInt(15, copyOfout1_0.sales);

							if (copyOfout1_0.origine == null) {
								pstmt_tMysqlOutput_3.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(16,
										copyOfout1_0.origine);
							}

							if (copyOfout1_0.body_type == null) {
								pstmt_tMysqlOutput_3.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(17,
										copyOfout1_0.body_type);
							}

							pstmt_tMysqlOutput_3.setInt(18, copyOfout1_0.rsp);

							if (copyOfout1_0.suv_type == null) {
								pstmt_tMysqlOutput_3.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(19,
										copyOfout1_0.suv_type);
							}

							if (copyOfout1_0.price_class == null) {
								pstmt_tMysqlOutput_3.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(20,
										copyOfout1_0.price_class);
							}

							pstmt_tMysqlOutput_3
									.setInt(21, copyOfout1_0.log_id);

							if (copyOfout1_0.type_vh == null) {
								pstmt_tMysqlOutput_3.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(22,
										copyOfout1_0.type_vh);
							}

							if (copyOfout1_0.status == null) {
								pstmt_tMysqlOutput_3.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(23,
										copyOfout1_0.status);
							}

							if (copyOfout1_0.created_at == null) {
								pstmt_tMysqlOutput_3.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_3.setInt(24,
										copyOfout1_0.created_at);
							}

							if (copyOfout1_0.updated_at == null) {
								pstmt_tMysqlOutput_3.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_3.setInt(25,
										copyOfout1_0.updated_at);
							}

							pstmt_tMysqlOutput_3.setLong(
									26 + count_tMysqlOutput_3, copyOfout1_0.id);

							pstmt_tMysqlOutput_3.addBatch();
							nb_line_tMysqlOutput_3++;

							batchSizeCounter_tMysqlOutput_3++;

							if (!whetherReject_tMysqlOutput_3) {
							}
							if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
								try {
									int countSum_tMysqlOutput_3 = 0;
									for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
											.executeBatch()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

									batchSizeCounter_tMysqlOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_3 = 0;
									for (int countEach_tMysqlOutput_3 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_3++;

							if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

								try {
									int countSum_tMysqlOutput_3 = 0;

									for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
											.executeBatch()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_3 = 0;
									for (int countEach_tMysqlOutput_3 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_3.commit();

								commitCounter_tMysqlOutput_3 = 0;

							}

							tos_count_tMysqlOutput_3++;

							/**
							 * [tMysqlOutput_3 main ] stop
							 */

						} // End of branch "copyOfout1_0"

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					if (rs_tMysqlInput_3 != null) {
						rs_tMysqlInput_3.close();
					}
					stmt_tMysqlInput_3.close();

					if (conn_tMysqlInput_3 != null
							&& !conn_tMysqlInput_3.isClosed()) {
						conn_tMysqlInput_3.close();
					}

				}
				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (pstmt_tMysqlOutput_3 != null) {
						int countSum_tMysqlOutput_3 = 0;

						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: countEach_tMysqlOutput_3);
						}

						updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				conn_tMysqlOutput_3.commit();

				conn_tMysqlOutput_3.close();
				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;
				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				tMysqlInput_4Process(globalMap);

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (resourceMap.get("finish_tMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tMysqlOutput_3") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_3")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
							System.out
									.println("failed to close the connection in tMysqlOutput_3 :"
											+ sqlEx_tMysqlOutput_3.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1_1Struct implements
			routines.system.IPersistableRow<copyOfout1_1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfout1_1Struct other = (copyOfout1_1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfout1_1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfout1_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfout1_1Struct copyOfout1_1 = new copyOfout1_1Struct();

				/**
				 * [tMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_4", false);
				start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_4";

				int tos_count_tMysqlOutput_4 = 0;

				int updateKeyCount_tMysqlOutput_4 = 1;
				if (updateKeyCount_tMysqlOutput_4 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_4 = 0;
				int nb_line_update_tMysqlOutput_4 = 0;
				int nb_line_inserted_tMysqlOutput_4 = 0;
				int nb_line_deleted_tMysqlOutput_4 = 0;
				int nb_line_rejected_tMysqlOutput_4 = 0;

				int deletedCount_tMysqlOutput_4 = 0;
				int updatedCount_tMysqlOutput_4 = 0;
				int insertedCount_tMysqlOutput_4 = 0;

				int rejectedCount_tMysqlOutput_4 = 0;

				String tableName_tMysqlOutput_4 = "items";
				boolean whetherReject_tMysqlOutput_4 = false;

				java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime()
						.getTime();
				calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4
						.getTime().getTime();
				long date_tMysqlOutput_4;

				java.sql.Connection conn_tMysqlOutput_4 = null;
				String dbProperties_tMysqlOutput_4 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_4 = null;
				if (dbProperties_tMysqlOutput_4 == null
						|| dbProperties_tMysqlOutput_4.trim().length() == 0) {
					url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_4;
				}
				String dbUser_tMysqlOutput_4 = "root";

				final String decryptedPassword_tMysqlOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_4, dbUser_tMysqlOutput_4,
						dbPwd_tMysqlOutput_4);

				resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
				conn_tMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tMysqlOutput_4 = 10000;
				int commitCounter_tMysqlOutput_4 = 0;
				int batchSize_tMysqlOutput_4 = 10000;
				int batchSizeCounter_tMysqlOutput_4 = 0;

				int count_tMysqlOutput_4 = 0;

				String update_tMysqlOutput_4 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(update_tMysqlOutput_4);

				/**
				 * [tMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1_1Struct copyOfout1_1_tmp = new copyOfout1_1Struct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMysqlInput_4 begin ] start
				 */

				ok_Hash.put("tMysqlInput_4", false);
				start_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				currentComponent = "tMysqlInput_4";

				int tos_count_tMysqlInput_4 = 0;

				java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4
						.getTime();
				int nb_line_tMysqlInput_4 = 0;
				java.sql.Connection conn_tMysqlInput_4 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_4 = "root";

				final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;

				String url_tMysqlInput_4 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_4, dbUser_tMysqlInput_4,
						dbPwd_tMysqlInput_4);

				java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4
						.createStatement();

				String dbquery_tMysqlInput_4 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'MPV'";

				globalMap.put("tMysqlInput_4_QUERY", dbquery_tMysqlInput_4);
				java.sql.ResultSet rs_tMysqlInput_4 = null;
				try {
					rs_tMysqlInput_4 = stmt_tMysqlInput_4
							.executeQuery(dbquery_tMysqlInput_4);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4
							.getMetaData();
					int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4
							.getColumnCount();

					String tmpContent_tMysqlInput_4 = null;

					while (rs_tMysqlInput_4.next()) {
						nb_line_tMysqlInput_4++;

						if (colQtyInRs_tMysqlInput_4 < 1) {
							row4.id = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(1) != null) {
								row4.id = rs_tMysqlInput_4.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 2) {
							row4.year = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(2) != null) {
								row4.year = rs_tMysqlInput_4.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 3) {
							row4.month = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(3) != null) {
								row4.month = rs_tMysqlInput_4.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 4) {
							row4.city = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(4);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.city = tmpContent_tMysqlInput_4;
							} else {
								row4.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 5) {
							row4.group = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(5);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.group = tmpContent_tMysqlInput_4;
							} else {
								row4.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 6) {
							row4.make = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(6);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.make = tmpContent_tMysqlInput_4;
							} else {
								row4.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 7) {
							row4.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(7);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.premium_segment = tmpContent_tMysqlInput_4;
							} else {
								row4.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 8) {
							row4.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(8);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.model_gnr = tmpContent_tMysqlInput_4;
							} else {
								row4.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 9) {
							row4.model = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(9);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.model = tmpContent_tMysqlInput_4;
							} else {
								row4.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 10) {
							row4.segment = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(10);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.segment = tmpContent_tMysqlInput_4;
							} else {
								row4.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 11) {
							row4.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(11);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.ckd_cbu = tmpContent_tMysqlInput_4;
							} else {
								row4.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 12) {
							row4.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(12);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.pc_cv = tmpContent_tMysqlInput_4;
							} else {
								row4.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 13) {
							row4.engine_type = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(13);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.engine_type = tmpContent_tMysqlInput_4;
							} else {
								row4.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 14) {
							row4.type = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(14);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.type = tmpContent_tMysqlInput_4;
							} else {
								row4.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 15) {
							row4.displacement = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(15) != null) {
								row4.displacement = rs_tMysqlInput_4.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 16) {
							row4.sales = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(16) != null) {
								row4.sales = rs_tMysqlInput_4.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 17) {
							row4.origine = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(17);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.origine = tmpContent_tMysqlInput_4;
							} else {
								row4.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 18) {
							row4.body_type = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(18);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.body_type = tmpContent_tMysqlInput_4;
							} else {
								row4.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 19) {
							row4.rsp = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(19) != null) {
								row4.rsp = rs_tMysqlInput_4.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 20) {
							row4.suv_type = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(20);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.suv_type = tmpContent_tMysqlInput_4;
							} else {
								row4.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 21) {
							row4.price_class = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(21);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.price_class = tmpContent_tMysqlInput_4;
							} else {
								row4.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 22) {
							row4.log_id = 0;
						} else {

							if (rs_tMysqlInput_4.getObject(22) != null) {
								row4.log_id = rs_tMysqlInput_4.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 23) {
							row4.type_vh = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(23);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.type_vh = tmpContent_tMysqlInput_4;
							} else {
								row4.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 24) {
							row4.status = null;
						} else {

							tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
									.getString(24);
							if (tmpContent_tMysqlInput_4 != null) {
								row4.status = tmpContent_tMysqlInput_4;
							} else {
								row4.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 25) {
							row4.created_at = null;
						} else {

							if (rs_tMysqlInput_4.getObject(25) != null) {
								row4.created_at = rs_tMysqlInput_4.getInt(25);
							} else {
								row4.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_4 < 26) {
							row4.updated_at = null;
						} else {

							if (rs_tMysqlInput_4.getObject(26) != null) {
								row4.updated_at = rs_tMysqlInput_4.getInt(26);
							} else {
								row4.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_4 begin ] stop
						 */
						/**
						 * [tMysqlInput_4 main ] start
						 */

						currentComponent = "tMysqlInput_4";

						tos_count_tMysqlInput_4++;

						/**
						 * [tMysqlInput_4 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							copyOfout1_1 = null;

							// # Output table : 'copyOfout1_1'
							copyOfout1_1_tmp.id = row4.id;
							copyOfout1_1_tmp.year = row4.year;
							copyOfout1_1_tmp.month = row4.month;
							copyOfout1_1_tmp.city = row4.city;
							copyOfout1_1_tmp.group = row4.group;
							copyOfout1_1_tmp.make = row4.make;
							copyOfout1_1_tmp.premium_segment = "Premium MPV";
							copyOfout1_1_tmp.model_gnr = row4.model_gnr;
							copyOfout1_1_tmp.model = row4.model;
							copyOfout1_1_tmp.segment = row4.segment;
							copyOfout1_1_tmp.ckd_cbu = row4.ckd_cbu;
							copyOfout1_1_tmp.pc_cv = row4.pc_cv;
							copyOfout1_1_tmp.engine_type = row4.engine_type;
							copyOfout1_1_tmp.type = row4.type;
							copyOfout1_1_tmp.displacement = row4.displacement;
							copyOfout1_1_tmp.sales = row4.sales;
							copyOfout1_1_tmp.origine = row4.origine;
							copyOfout1_1_tmp.body_type = row4.body_type;
							copyOfout1_1_tmp.rsp = row4.rsp;
							copyOfout1_1_tmp.suv_type = row4.suv_type;
							copyOfout1_1_tmp.price_class = row4.price_class;
							copyOfout1_1_tmp.log_id = row4.log_id;
							copyOfout1_1_tmp.type_vh = row4.type_vh;
							copyOfout1_1_tmp.status = row4.status;
							copyOfout1_1_tmp.created_at = null;
							copyOfout1_1_tmp.updated_at = null;
							copyOfout1_1 = copyOfout1_1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "copyOfout1_1"
						if (copyOfout1_1 != null) {

							/**
							 * [tMysqlOutput_4 main ] start
							 */

							currentComponent = "tMysqlOutput_4";

							whetherReject_tMysqlOutput_4 = false;
							pstmt_tMysqlOutput_4.setInt(1, copyOfout1_1.year);

							pstmt_tMysqlOutput_4.setInt(2, copyOfout1_1.month);

							if (copyOfout1_1.city == null) {
								pstmt_tMysqlOutput_4.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(3,
										copyOfout1_1.city);
							}

							if (copyOfout1_1.group == null) {
								pstmt_tMysqlOutput_4.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(4,
										copyOfout1_1.group);
							}

							if (copyOfout1_1.make == null) {
								pstmt_tMysqlOutput_4.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(5,
										copyOfout1_1.make);
							}

							if (copyOfout1_1.premium_segment == null) {
								pstmt_tMysqlOutput_4.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(6,
										copyOfout1_1.premium_segment);
							}

							if (copyOfout1_1.model_gnr == null) {
								pstmt_tMysqlOutput_4.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(7,
										copyOfout1_1.model_gnr);
							}

							if (copyOfout1_1.model == null) {
								pstmt_tMysqlOutput_4.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(8,
										copyOfout1_1.model);
							}

							if (copyOfout1_1.segment == null) {
								pstmt_tMysqlOutput_4.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(9,
										copyOfout1_1.segment);
							}

							if (copyOfout1_1.ckd_cbu == null) {
								pstmt_tMysqlOutput_4.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(10,
										copyOfout1_1.ckd_cbu);
							}

							if (copyOfout1_1.pc_cv == null) {
								pstmt_tMysqlOutput_4.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(11,
										copyOfout1_1.pc_cv);
							}

							if (copyOfout1_1.engine_type == null) {
								pstmt_tMysqlOutput_4.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(12,
										copyOfout1_1.engine_type);
							}

							if (copyOfout1_1.type == null) {
								pstmt_tMysqlOutput_4.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(13,
										copyOfout1_1.type);
							}

							pstmt_tMysqlOutput_4.setInt(14,
									copyOfout1_1.displacement);

							pstmt_tMysqlOutput_4.setInt(15, copyOfout1_1.sales);

							if (copyOfout1_1.origine == null) {
								pstmt_tMysqlOutput_4.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(16,
										copyOfout1_1.origine);
							}

							if (copyOfout1_1.body_type == null) {
								pstmt_tMysqlOutput_4.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(17,
										copyOfout1_1.body_type);
							}

							pstmt_tMysqlOutput_4.setInt(18, copyOfout1_1.rsp);

							if (copyOfout1_1.suv_type == null) {
								pstmt_tMysqlOutput_4.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(19,
										copyOfout1_1.suv_type);
							}

							if (copyOfout1_1.price_class == null) {
								pstmt_tMysqlOutput_4.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(20,
										copyOfout1_1.price_class);
							}

							pstmt_tMysqlOutput_4
									.setInt(21, copyOfout1_1.log_id);

							if (copyOfout1_1.type_vh == null) {
								pstmt_tMysqlOutput_4.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(22,
										copyOfout1_1.type_vh);
							}

							if (copyOfout1_1.status == null) {
								pstmt_tMysqlOutput_4.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_4.setString(23,
										copyOfout1_1.status);
							}

							if (copyOfout1_1.created_at == null) {
								pstmt_tMysqlOutput_4.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_4.setInt(24,
										copyOfout1_1.created_at);
							}

							if (copyOfout1_1.updated_at == null) {
								pstmt_tMysqlOutput_4.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_4.setInt(25,
										copyOfout1_1.updated_at);
							}

							pstmt_tMysqlOutput_4.setLong(
									26 + count_tMysqlOutput_4, copyOfout1_1.id);

							pstmt_tMysqlOutput_4.addBatch();
							nb_line_tMysqlOutput_4++;

							batchSizeCounter_tMysqlOutput_4++;

							if (!whetherReject_tMysqlOutput_4) {
							}
							if (batchSize_tMysqlOutput_4 <= batchSizeCounter_tMysqlOutput_4) {
								try {
									int countSum_tMysqlOutput_4 = 0;
									for (int countEach_tMysqlOutput_4 : pstmt_tMysqlOutput_4
											.executeBatch()) {
										countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
												: countEach_tMysqlOutput_4);
									}

									updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

									batchSizeCounter_tMysqlOutput_4 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_4 = 0;
									for (int countEach_tMysqlOutput_4 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
												: countEach_tMysqlOutput_4);
									}

									updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_4++;

							if (commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

								try {
									int countSum_tMysqlOutput_4 = 0;

									for (int countEach_tMysqlOutput_4 : pstmt_tMysqlOutput_4
											.executeBatch()) {
										countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
												: countEach_tMysqlOutput_4);
									}

									updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_4 = 0;
									for (int countEach_tMysqlOutput_4 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
												: countEach_tMysqlOutput_4);
									}

									updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_4.commit();

								commitCounter_tMysqlOutput_4 = 0;

							}

							tos_count_tMysqlOutput_4++;

							/**
							 * [tMysqlOutput_4 main ] stop
							 */

						} // End of branch "copyOfout1_1"

						/**
						 * [tMysqlInput_4 end ] start
						 */

						currentComponent = "tMysqlInput_4";

					}
				} finally {
					if (rs_tMysqlInput_4 != null) {
						rs_tMysqlInput_4.close();
					}
					stmt_tMysqlInput_4.close();

					if (conn_tMysqlInput_4 != null
							&& !conn_tMysqlInput_4.isClosed()) {
						conn_tMysqlInput_4.close();
					}

				}
				globalMap.put("tMysqlInput_4_NB_LINE", nb_line_tMysqlInput_4);

				ok_Hash.put("tMysqlInput_4", true);
				end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				/**
				 * [tMysqlInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMysqlOutput_4 end ] start
				 */

				currentComponent = "tMysqlOutput_4";

				try {
					if (pstmt_tMysqlOutput_4 != null) {
						int countSum_tMysqlOutput_4 = 0;

						for (int countEach_tMysqlOutput_4 : pstmt_tMysqlOutput_4
								.executeBatch()) {
							countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
									: countEach_tMysqlOutput_4);
						}

						updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_4 = 0;
					for (int countEach_tMysqlOutput_4 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0
								: countEach_tMysqlOutput_4);
					}

					updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_4 != null) {

					pstmt_tMysqlOutput_4.close();

				}

				conn_tMysqlOutput_4.commit();

				conn_tMysqlOutput_4.close();
				resourceMap.put("finish_tMysqlOutput_4", true);

				nb_line_deleted_tMysqlOutput_4 = nb_line_deleted_tMysqlOutput_4
						+ deletedCount_tMysqlOutput_4;
				nb_line_update_tMysqlOutput_4 = nb_line_update_tMysqlOutput_4
						+ updatedCount_tMysqlOutput_4;
				nb_line_inserted_tMysqlOutput_4 = nb_line_inserted_tMysqlOutput_4
						+ insertedCount_tMysqlOutput_4;
				nb_line_rejected_tMysqlOutput_4 = nb_line_rejected_tMysqlOutput_4
						+ rejectedCount_tMysqlOutput_4;
				globalMap.put("tMysqlOutput_4_NB_LINE", nb_line_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_4);

				ok_Hash.put("tMysqlOutput_4", true);
				end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				tMysqlInput_5Process(globalMap);

				/**
				 * [tMysqlOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_4 finally ] start
				 */

				currentComponent = "tMysqlInput_4";

				/**
				 * [tMysqlInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMysqlOutput_4 finally ] start
				 */

				currentComponent = "tMysqlOutput_4";

				if (resourceMap.get("finish_tMysqlOutput_4") == null) {
					if (resourceMap.get("conn_tMysqlOutput_4") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_4")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
							System.out
									.println("failed to close the connection in tMysqlOutput_4 :"
											+ sqlEx_tMysqlOutput_4.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfout1_1Struct implements
			routines.system.IPersistableRow<copyOfcopyOfout1_1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfout1_1Struct other = (copyOfcopyOfout1_1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfout1_1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfcopyOfout1_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfout1_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				copyOfcopyOfout1_1Struct copyOfcopyOfout1_1 = new copyOfcopyOfout1_1Struct();

				/**
				 * [tMysqlOutput_5 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_5", false);
				start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_5";

				int tos_count_tMysqlOutput_5 = 0;

				int updateKeyCount_tMysqlOutput_5 = 1;
				if (updateKeyCount_tMysqlOutput_5 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_5 = 0;
				int nb_line_update_tMysqlOutput_5 = 0;
				int nb_line_inserted_tMysqlOutput_5 = 0;
				int nb_line_deleted_tMysqlOutput_5 = 0;
				int nb_line_rejected_tMysqlOutput_5 = 0;

				int deletedCount_tMysqlOutput_5 = 0;
				int updatedCount_tMysqlOutput_5 = 0;
				int insertedCount_tMysqlOutput_5 = 0;

				int rejectedCount_tMysqlOutput_5 = 0;

				String tableName_tMysqlOutput_5 = "items";
				boolean whetherReject_tMysqlOutput_5 = false;

				java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime()
						.getTime();
				calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5
						.getTime().getTime();
				long date_tMysqlOutput_5;

				java.sql.Connection conn_tMysqlOutput_5 = null;
				String dbProperties_tMysqlOutput_5 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_5 = null;
				if (dbProperties_tMysqlOutput_5 == null
						|| dbProperties_tMysqlOutput_5.trim().length() == 0) {
					url_tMysqlOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_5;
				}
				String dbUser_tMysqlOutput_5 = "root";

				final String decryptedPassword_tMysqlOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_5 = decryptedPassword_tMysqlOutput_5;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_5, dbUser_tMysqlOutput_5,
						dbPwd_tMysqlOutput_5);

				resourceMap.put("conn_tMysqlOutput_5", conn_tMysqlOutput_5);
				conn_tMysqlOutput_5.setAutoCommit(false);
				int commitEvery_tMysqlOutput_5 = 10000;
				int commitCounter_tMysqlOutput_5 = 0;
				int batchSize_tMysqlOutput_5 = 10000;
				int batchSizeCounter_tMysqlOutput_5 = 0;

				int count_tMysqlOutput_5 = 0;

				String update_tMysqlOutput_5 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5
						.prepareStatement(update_tMysqlOutput_5);

				/**
				 * [tMysqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfout1_1Struct copyOfcopyOfout1_1_tmp = new copyOfcopyOfout1_1Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tMysqlInput_5 begin ] start
				 */

				ok_Hash.put("tMysqlInput_5", false);
				start_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				currentComponent = "tMysqlInput_5";

				int tos_count_tMysqlInput_5 = 0;

				java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5
						.getTime();
				int nb_line_tMysqlInput_5 = 0;
				java.sql.Connection conn_tMysqlInput_5 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_5 = "root";

				final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;

				String url_tMysqlInput_5 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_5, dbUser_tMysqlInput_5,
						dbPwd_tMysqlInput_5);

				java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5
						.createStatement();

				String dbquery_tMysqlInput_5 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'SUV'";

				globalMap.put("tMysqlInput_5_QUERY", dbquery_tMysqlInput_5);
				java.sql.ResultSet rs_tMysqlInput_5 = null;
				try {
					rs_tMysqlInput_5 = stmt_tMysqlInput_5
							.executeQuery(dbquery_tMysqlInput_5);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5
							.getMetaData();
					int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5
							.getColumnCount();

					String tmpContent_tMysqlInput_5 = null;

					while (rs_tMysqlInput_5.next()) {
						nb_line_tMysqlInput_5++;

						if (colQtyInRs_tMysqlInput_5 < 1) {
							row5.id = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(1) != null) {
								row5.id = rs_tMysqlInput_5.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 2) {
							row5.year = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(2) != null) {
								row5.year = rs_tMysqlInput_5.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 3) {
							row5.month = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(3) != null) {
								row5.month = rs_tMysqlInput_5.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 4) {
							row5.city = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(4);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.city = tmpContent_tMysqlInput_5;
							} else {
								row5.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 5) {
							row5.group = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(5);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.group = tmpContent_tMysqlInput_5;
							} else {
								row5.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 6) {
							row5.make = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(6);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.make = tmpContent_tMysqlInput_5;
							} else {
								row5.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 7) {
							row5.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(7);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.premium_segment = tmpContent_tMysqlInput_5;
							} else {
								row5.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 8) {
							row5.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(8);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.model_gnr = tmpContent_tMysqlInput_5;
							} else {
								row5.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 9) {
							row5.model = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(9);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.model = tmpContent_tMysqlInput_5;
							} else {
								row5.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 10) {
							row5.segment = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(10);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.segment = tmpContent_tMysqlInput_5;
							} else {
								row5.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 11) {
							row5.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(11);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.ckd_cbu = tmpContent_tMysqlInput_5;
							} else {
								row5.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 12) {
							row5.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(12);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.pc_cv = tmpContent_tMysqlInput_5;
							} else {
								row5.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 13) {
							row5.engine_type = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(13);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.engine_type = tmpContent_tMysqlInput_5;
							} else {
								row5.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 14) {
							row5.type = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(14);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.type = tmpContent_tMysqlInput_5;
							} else {
								row5.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 15) {
							row5.displacement = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(15) != null) {
								row5.displacement = rs_tMysqlInput_5.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 16) {
							row5.sales = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(16) != null) {
								row5.sales = rs_tMysqlInput_5.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 17) {
							row5.origine = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(17);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.origine = tmpContent_tMysqlInput_5;
							} else {
								row5.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 18) {
							row5.body_type = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(18);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.body_type = tmpContent_tMysqlInput_5;
							} else {
								row5.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 19) {
							row5.rsp = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(19) != null) {
								row5.rsp = rs_tMysqlInput_5.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 20) {
							row5.suv_type = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(20);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.suv_type = tmpContent_tMysqlInput_5;
							} else {
								row5.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 21) {
							row5.price_class = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(21);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.price_class = tmpContent_tMysqlInput_5;
							} else {
								row5.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 22) {
							row5.log_id = 0;
						} else {

							if (rs_tMysqlInput_5.getObject(22) != null) {
								row5.log_id = rs_tMysqlInput_5.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 23) {
							row5.type_vh = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(23);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.type_vh = tmpContent_tMysqlInput_5;
							} else {
								row5.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 24) {
							row5.status = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(24);
							if (tmpContent_tMysqlInput_5 != null) {
								row5.status = tmpContent_tMysqlInput_5;
							} else {
								row5.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 25) {
							row5.created_at = null;
						} else {

							if (rs_tMysqlInput_5.getObject(25) != null) {
								row5.created_at = rs_tMysqlInput_5.getInt(25);
							} else {
								row5.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_5 < 26) {
							row5.updated_at = null;
						} else {

							if (rs_tMysqlInput_5.getObject(26) != null) {
								row5.updated_at = rs_tMysqlInput_5.getInt(26);
							} else {
								row5.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_5 begin ] stop
						 */
						/**
						 * [tMysqlInput_5 main ] start
						 */

						currentComponent = "tMysqlInput_5";

						tos_count_tMysqlInput_5++;

						/**
						 * [tMysqlInput_5 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfout1_1 = null;

							// # Output table : 'copyOfcopyOfout1_1'
							copyOfcopyOfout1_1_tmp.id = row5.id;
							copyOfcopyOfout1_1_tmp.year = row5.year;
							copyOfcopyOfout1_1_tmp.month = row5.month;
							copyOfcopyOfout1_1_tmp.city = row5.city;
							copyOfcopyOfout1_1_tmp.group = row5.group;
							copyOfcopyOfout1_1_tmp.make = row5.make;
							copyOfcopyOfout1_1_tmp.premium_segment = "Premium SUV";
							copyOfcopyOfout1_1_tmp.model_gnr = row5.model_gnr;
							copyOfcopyOfout1_1_tmp.model = row5.model;
							copyOfcopyOfout1_1_tmp.segment = row5.segment;
							copyOfcopyOfout1_1_tmp.ckd_cbu = row5.ckd_cbu;
							copyOfcopyOfout1_1_tmp.pc_cv = row5.pc_cv;
							copyOfcopyOfout1_1_tmp.engine_type = row5.engine_type;
							copyOfcopyOfout1_1_tmp.type = row5.type;
							copyOfcopyOfout1_1_tmp.displacement = row5.displacement;
							copyOfcopyOfout1_1_tmp.sales = row5.sales;
							copyOfcopyOfout1_1_tmp.origine = row5.origine;
							copyOfcopyOfout1_1_tmp.body_type = row5.body_type;
							copyOfcopyOfout1_1_tmp.rsp = row5.rsp;
							copyOfcopyOfout1_1_tmp.suv_type = row5.suv_type;
							copyOfcopyOfout1_1_tmp.price_class = row5.price_class;
							copyOfcopyOfout1_1_tmp.log_id = row5.log_id;
							copyOfcopyOfout1_1_tmp.type_vh = row5.type_vh;
							copyOfcopyOfout1_1_tmp.status = row5.status;
							copyOfcopyOfout1_1_tmp.created_at = null;
							copyOfcopyOfout1_1_tmp.updated_at = null;
							copyOfcopyOfout1_1 = copyOfcopyOfout1_1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "copyOfcopyOfout1_1"
						if (copyOfcopyOfout1_1 != null) {

							/**
							 * [tMysqlOutput_5 main ] start
							 */

							currentComponent = "tMysqlOutput_5";

							whetherReject_tMysqlOutput_5 = false;
							pstmt_tMysqlOutput_5.setInt(1,
									copyOfcopyOfout1_1.year);

							pstmt_tMysqlOutput_5.setInt(2,
									copyOfcopyOfout1_1.month);

							if (copyOfcopyOfout1_1.city == null) {
								pstmt_tMysqlOutput_5.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(3,
										copyOfcopyOfout1_1.city);
							}

							if (copyOfcopyOfout1_1.group == null) {
								pstmt_tMysqlOutput_5.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(4,
										copyOfcopyOfout1_1.group);
							}

							if (copyOfcopyOfout1_1.make == null) {
								pstmt_tMysqlOutput_5.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(5,
										copyOfcopyOfout1_1.make);
							}

							if (copyOfcopyOfout1_1.premium_segment == null) {
								pstmt_tMysqlOutput_5.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(6,
										copyOfcopyOfout1_1.premium_segment);
							}

							if (copyOfcopyOfout1_1.model_gnr == null) {
								pstmt_tMysqlOutput_5.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(7,
										copyOfcopyOfout1_1.model_gnr);
							}

							if (copyOfcopyOfout1_1.model == null) {
								pstmt_tMysqlOutput_5.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(8,
										copyOfcopyOfout1_1.model);
							}

							if (copyOfcopyOfout1_1.segment == null) {
								pstmt_tMysqlOutput_5.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(9,
										copyOfcopyOfout1_1.segment);
							}

							if (copyOfcopyOfout1_1.ckd_cbu == null) {
								pstmt_tMysqlOutput_5.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(10,
										copyOfcopyOfout1_1.ckd_cbu);
							}

							if (copyOfcopyOfout1_1.pc_cv == null) {
								pstmt_tMysqlOutput_5.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(11,
										copyOfcopyOfout1_1.pc_cv);
							}

							if (copyOfcopyOfout1_1.engine_type == null) {
								pstmt_tMysqlOutput_5.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(12,
										copyOfcopyOfout1_1.engine_type);
							}

							if (copyOfcopyOfout1_1.type == null) {
								pstmt_tMysqlOutput_5.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(13,
										copyOfcopyOfout1_1.type);
							}

							pstmt_tMysqlOutput_5.setInt(14,
									copyOfcopyOfout1_1.displacement);

							pstmt_tMysqlOutput_5.setInt(15,
									copyOfcopyOfout1_1.sales);

							if (copyOfcopyOfout1_1.origine == null) {
								pstmt_tMysqlOutput_5.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(16,
										copyOfcopyOfout1_1.origine);
							}

							if (copyOfcopyOfout1_1.body_type == null) {
								pstmt_tMysqlOutput_5.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(17,
										copyOfcopyOfout1_1.body_type);
							}

							pstmt_tMysqlOutput_5.setInt(18,
									copyOfcopyOfout1_1.rsp);

							if (copyOfcopyOfout1_1.suv_type == null) {
								pstmt_tMysqlOutput_5.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(19,
										copyOfcopyOfout1_1.suv_type);
							}

							if (copyOfcopyOfout1_1.price_class == null) {
								pstmt_tMysqlOutput_5.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(20,
										copyOfcopyOfout1_1.price_class);
							}

							pstmt_tMysqlOutput_5.setInt(21,
									copyOfcopyOfout1_1.log_id);

							if (copyOfcopyOfout1_1.type_vh == null) {
								pstmt_tMysqlOutput_5.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(22,
										copyOfcopyOfout1_1.type_vh);
							}

							if (copyOfcopyOfout1_1.status == null) {
								pstmt_tMysqlOutput_5.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(23,
										copyOfcopyOfout1_1.status);
							}

							if (copyOfcopyOfout1_1.created_at == null) {
								pstmt_tMysqlOutput_5.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_5.setInt(24,
										copyOfcopyOfout1_1.created_at);
							}

							if (copyOfcopyOfout1_1.updated_at == null) {
								pstmt_tMysqlOutput_5.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_5.setInt(25,
										copyOfcopyOfout1_1.updated_at);
							}

							pstmt_tMysqlOutput_5.setLong(
									26 + count_tMysqlOutput_5,
									copyOfcopyOfout1_1.id);

							pstmt_tMysqlOutput_5.addBatch();
							nb_line_tMysqlOutput_5++;

							batchSizeCounter_tMysqlOutput_5++;

							if (!whetherReject_tMysqlOutput_5) {
							}
							if (batchSize_tMysqlOutput_5 <= batchSizeCounter_tMysqlOutput_5) {
								try {
									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

									batchSizeCounter_tMysqlOutput_5 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_5++;

							if (commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

								try {
									int countSum_tMysqlOutput_5 = 0;

									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_5.commit();

								commitCounter_tMysqlOutput_5 = 0;

							}

							tos_count_tMysqlOutput_5++;

							/**
							 * [tMysqlOutput_5 main ] stop
							 */

						} // End of branch "copyOfcopyOfout1_1"

						/**
						 * [tMysqlInput_5 end ] start
						 */

						currentComponent = "tMysqlInput_5";

					}
				} finally {
					if (rs_tMysqlInput_5 != null) {
						rs_tMysqlInput_5.close();
					}
					stmt_tMysqlInput_5.close();

					if (conn_tMysqlInput_5 != null
							&& !conn_tMysqlInput_5.isClosed()) {
						conn_tMysqlInput_5.close();
					}

				}
				globalMap.put("tMysqlInput_5_NB_LINE", nb_line_tMysqlInput_5);

				ok_Hash.put("tMysqlInput_5", true);
				end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				/**
				 * [tMysqlInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMysqlOutput_5 end ] start
				 */

				currentComponent = "tMysqlOutput_5";

				try {
					if (pstmt_tMysqlOutput_5 != null) {
						int countSum_tMysqlOutput_5 = 0;

						for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
								.executeBatch()) {
							countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
									: countEach_tMysqlOutput_5);
						}

						updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_5 = 0;
					for (int countEach_tMysqlOutput_5 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
								: countEach_tMysqlOutput_5);
					}

					updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_5 != null) {

					pstmt_tMysqlOutput_5.close();

				}

				conn_tMysqlOutput_5.commit();

				conn_tMysqlOutput_5.close();
				resourceMap.put("finish_tMysqlOutput_5", true);

				nb_line_deleted_tMysqlOutput_5 = nb_line_deleted_tMysqlOutput_5
						+ deletedCount_tMysqlOutput_5;
				nb_line_update_tMysqlOutput_5 = nb_line_update_tMysqlOutput_5
						+ updatedCount_tMysqlOutput_5;
				nb_line_inserted_tMysqlOutput_5 = nb_line_inserted_tMysqlOutput_5
						+ insertedCount_tMysqlOutput_5;
				nb_line_rejected_tMysqlOutput_5 = nb_line_rejected_tMysqlOutput_5
						+ rejectedCount_tMysqlOutput_5;
				globalMap.put("tMysqlOutput_5_NB_LINE", nb_line_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_5);

				ok_Hash.put("tMysqlOutput_5", true);
				end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				tMysqlInput_6Process(globalMap);

				/**
				 * [tMysqlOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_5 finally ] start
				 */

				currentComponent = "tMysqlInput_5";

				/**
				 * [tMysqlInput_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMysqlOutput_5 finally ] start
				 */

				currentComponent = "tMysqlOutput_5";

				if (resourceMap.get("finish_tMysqlOutput_5") == null) {
					if (resourceMap.get("conn_tMysqlOutput_5") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_5")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_5) {
							System.out
									.println("failed to close the connection in tMysqlOutput_5 :"
											+ sqlEx_tMysqlOutput_5.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfout1_1Struct implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfout1_1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfout1_1Struct other = (copyOfcopyOfcopyOfout1_1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfout1_1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfout1_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfout1_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				copyOfcopyOfcopyOfout1_1Struct copyOfcopyOfcopyOfout1_1 = new copyOfcopyOfcopyOfout1_1Struct();

				/**
				 * [tMysqlOutput_6 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_6", false);
				start_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_6";

				int tos_count_tMysqlOutput_6 = 0;

				int updateKeyCount_tMysqlOutput_6 = 1;
				if (updateKeyCount_tMysqlOutput_6 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_6 = 0;
				int nb_line_update_tMysqlOutput_6 = 0;
				int nb_line_inserted_tMysqlOutput_6 = 0;
				int nb_line_deleted_tMysqlOutput_6 = 0;
				int nb_line_rejected_tMysqlOutput_6 = 0;

				int deletedCount_tMysqlOutput_6 = 0;
				int updatedCount_tMysqlOutput_6 = 0;
				int insertedCount_tMysqlOutput_6 = 0;

				int rejectedCount_tMysqlOutput_6 = 0;

				String tableName_tMysqlOutput_6 = "items";
				boolean whetherReject_tMysqlOutput_6 = false;

				java.util.Calendar calendar_tMysqlOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime()
						.getTime();
				calendar_tMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_6 = calendar_tMysqlOutput_6
						.getTime().getTime();
				long date_tMysqlOutput_6;

				java.sql.Connection conn_tMysqlOutput_6 = null;
				String dbProperties_tMysqlOutput_6 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_6 = null;
				if (dbProperties_tMysqlOutput_6 == null
						|| dbProperties_tMysqlOutput_6.trim().length() == 0) {
					url_tMysqlOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_6;
				}
				String dbUser_tMysqlOutput_6 = "root";

				final String decryptedPassword_tMysqlOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_6 = decryptedPassword_tMysqlOutput_6;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_6 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_6, dbUser_tMysqlOutput_6,
						dbPwd_tMysqlOutput_6);

				resourceMap.put("conn_tMysqlOutput_6", conn_tMysqlOutput_6);
				conn_tMysqlOutput_6.setAutoCommit(false);
				int commitEvery_tMysqlOutput_6 = 10000;
				int commitCounter_tMysqlOutput_6 = 0;
				int batchSize_tMysqlOutput_6 = 10000;
				int batchSizeCounter_tMysqlOutput_6 = 0;

				int count_tMysqlOutput_6 = 0;

				String update_tMysqlOutput_6 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_6 = conn_tMysqlOutput_6
						.prepareStatement(update_tMysqlOutput_6);

				/**
				 * [tMysqlOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfcopyOfout1_1Struct copyOfcopyOfcopyOfout1_1_tmp = new copyOfcopyOfcopyOfout1_1Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tMysqlInput_6 begin ] start
				 */

				ok_Hash.put("tMysqlInput_6", false);
				start_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				currentComponent = "tMysqlInput_6";

				int tos_count_tMysqlInput_6 = 0;

				java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6
						.getTime();
				int nb_line_tMysqlInput_6 = 0;
				java.sql.Connection conn_tMysqlInput_6 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_6 = "root";

				final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;

				String url_tMysqlInput_6 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_6, dbUser_tMysqlInput_6,
						dbPwd_tMysqlInput_6);

				java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6
						.createStatement();

				String dbquery_tMysqlInput_6 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'Large'";

				globalMap.put("tMysqlInput_6_QUERY", dbquery_tMysqlInput_6);
				java.sql.ResultSet rs_tMysqlInput_6 = null;
				try {
					rs_tMysqlInput_6 = stmt_tMysqlInput_6
							.executeQuery(dbquery_tMysqlInput_6);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6
							.getMetaData();
					int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6
							.getColumnCount();

					String tmpContent_tMysqlInput_6 = null;

					while (rs_tMysqlInput_6.next()) {
						nb_line_tMysqlInput_6++;

						if (colQtyInRs_tMysqlInput_6 < 1) {
							row6.id = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(1) != null) {
								row6.id = rs_tMysqlInput_6.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 2) {
							row6.year = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(2) != null) {
								row6.year = rs_tMysqlInput_6.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 3) {
							row6.month = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(3) != null) {
								row6.month = rs_tMysqlInput_6.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 4) {
							row6.city = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(4);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.city = tmpContent_tMysqlInput_6;
							} else {
								row6.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 5) {
							row6.group = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(5);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.group = tmpContent_tMysqlInput_6;
							} else {
								row6.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 6) {
							row6.make = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(6);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.make = tmpContent_tMysqlInput_6;
							} else {
								row6.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 7) {
							row6.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(7);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.premium_segment = tmpContent_tMysqlInput_6;
							} else {
								row6.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 8) {
							row6.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(8);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.model_gnr = tmpContent_tMysqlInput_6;
							} else {
								row6.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 9) {
							row6.model = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(9);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.model = tmpContent_tMysqlInput_6;
							} else {
								row6.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 10) {
							row6.segment = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(10);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.segment = tmpContent_tMysqlInput_6;
							} else {
								row6.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 11) {
							row6.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(11);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.ckd_cbu = tmpContent_tMysqlInput_6;
							} else {
								row6.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 12) {
							row6.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(12);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.pc_cv = tmpContent_tMysqlInput_6;
							} else {
								row6.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 13) {
							row6.engine_type = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(13);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.engine_type = tmpContent_tMysqlInput_6;
							} else {
								row6.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 14) {
							row6.type = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(14);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.type = tmpContent_tMysqlInput_6;
							} else {
								row6.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 15) {
							row6.displacement = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(15) != null) {
								row6.displacement = rs_tMysqlInput_6.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 16) {
							row6.sales = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(16) != null) {
								row6.sales = rs_tMysqlInput_6.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 17) {
							row6.origine = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(17);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.origine = tmpContent_tMysqlInput_6;
							} else {
								row6.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 18) {
							row6.body_type = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(18);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.body_type = tmpContent_tMysqlInput_6;
							} else {
								row6.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 19) {
							row6.rsp = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(19) != null) {
								row6.rsp = rs_tMysqlInput_6.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 20) {
							row6.suv_type = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(20);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.suv_type = tmpContent_tMysqlInput_6;
							} else {
								row6.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 21) {
							row6.price_class = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(21);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.price_class = tmpContent_tMysqlInput_6;
							} else {
								row6.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 22) {
							row6.log_id = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(22) != null) {
								row6.log_id = rs_tMysqlInput_6.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 23) {
							row6.type_vh = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(23);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.type_vh = tmpContent_tMysqlInput_6;
							} else {
								row6.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 24) {
							row6.status = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(24);
							if (tmpContent_tMysqlInput_6 != null) {
								row6.status = tmpContent_tMysqlInput_6;
							} else {
								row6.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 25) {
							row6.created_at = null;
						} else {

							if (rs_tMysqlInput_6.getObject(25) != null) {
								row6.created_at = rs_tMysqlInput_6.getInt(25);
							} else {
								row6.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_6 < 26) {
							row6.updated_at = null;
						} else {

							if (rs_tMysqlInput_6.getObject(26) != null) {
								row6.updated_at = rs_tMysqlInput_6.getInt(26);
							} else {
								row6.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_6 begin ] stop
						 */
						/**
						 * [tMysqlInput_6 main ] start
						 */

						currentComponent = "tMysqlInput_6";

						tos_count_tMysqlInput_6++;

						/**
						 * [tMysqlInput_6 main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfcopyOfout1_1 = null;

							// # Output table : 'copyOfcopyOfcopyOfout1_1'
							copyOfcopyOfcopyOfout1_1_tmp.id = row6.id;
							copyOfcopyOfcopyOfout1_1_tmp.year = row6.year;
							copyOfcopyOfcopyOfout1_1_tmp.month = row6.month;
							copyOfcopyOfcopyOfout1_1_tmp.city = row6.city;
							copyOfcopyOfcopyOfout1_1_tmp.group = row6.group;
							copyOfcopyOfcopyOfout1_1_tmp.make = row6.make;
							copyOfcopyOfcopyOfout1_1_tmp.premium_segment = "premium Large";
							copyOfcopyOfcopyOfout1_1_tmp.model_gnr = row6.model_gnr;
							copyOfcopyOfcopyOfout1_1_tmp.model = row6.model;
							copyOfcopyOfcopyOfout1_1_tmp.segment = row6.segment;
							copyOfcopyOfcopyOfout1_1_tmp.ckd_cbu = row6.ckd_cbu;
							copyOfcopyOfcopyOfout1_1_tmp.pc_cv = row6.pc_cv;
							copyOfcopyOfcopyOfout1_1_tmp.engine_type = row6.engine_type;
							copyOfcopyOfcopyOfout1_1_tmp.type = row6.type;
							copyOfcopyOfcopyOfout1_1_tmp.displacement = row6.displacement;
							copyOfcopyOfcopyOfout1_1_tmp.sales = row6.sales;
							copyOfcopyOfcopyOfout1_1_tmp.origine = row6.origine;
							copyOfcopyOfcopyOfout1_1_tmp.body_type = row6.body_type;
							copyOfcopyOfcopyOfout1_1_tmp.rsp = row6.rsp;
							copyOfcopyOfcopyOfout1_1_tmp.suv_type = row6.suv_type;
							copyOfcopyOfcopyOfout1_1_tmp.price_class = row6.price_class;
							copyOfcopyOfcopyOfout1_1_tmp.log_id = row6.log_id;
							copyOfcopyOfcopyOfout1_1_tmp.type_vh = row6.type_vh;
							copyOfcopyOfcopyOfout1_1_tmp.status = row6.status;
							copyOfcopyOfcopyOfout1_1_tmp.created_at = null;
							copyOfcopyOfcopyOfout1_1_tmp.updated_at = null;
							copyOfcopyOfcopyOfout1_1 = copyOfcopyOfcopyOfout1_1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */
						// Start of branch "copyOfcopyOfcopyOfout1_1"
						if (copyOfcopyOfcopyOfout1_1 != null) {

							/**
							 * [tMysqlOutput_6 main ] start
							 */

							currentComponent = "tMysqlOutput_6";

							whetherReject_tMysqlOutput_6 = false;
							pstmt_tMysqlOutput_6.setInt(1,
									copyOfcopyOfcopyOfout1_1.year);

							pstmt_tMysqlOutput_6.setInt(2,
									copyOfcopyOfcopyOfout1_1.month);

							if (copyOfcopyOfcopyOfout1_1.city == null) {
								pstmt_tMysqlOutput_6.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(3,
										copyOfcopyOfcopyOfout1_1.city);
							}

							if (copyOfcopyOfcopyOfout1_1.group == null) {
								pstmt_tMysqlOutput_6.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(4,
										copyOfcopyOfcopyOfout1_1.group);
							}

							if (copyOfcopyOfcopyOfout1_1.make == null) {
								pstmt_tMysqlOutput_6.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(5,
										copyOfcopyOfcopyOfout1_1.make);
							}

							if (copyOfcopyOfcopyOfout1_1.premium_segment == null) {
								pstmt_tMysqlOutput_6.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6
										.setString(
												6,
												copyOfcopyOfcopyOfout1_1.premium_segment);
							}

							if (copyOfcopyOfcopyOfout1_1.model_gnr == null) {
								pstmt_tMysqlOutput_6.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(7,
										copyOfcopyOfcopyOfout1_1.model_gnr);
							}

							if (copyOfcopyOfcopyOfout1_1.model == null) {
								pstmt_tMysqlOutput_6.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(8,
										copyOfcopyOfcopyOfout1_1.model);
							}

							if (copyOfcopyOfcopyOfout1_1.segment == null) {
								pstmt_tMysqlOutput_6.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(9,
										copyOfcopyOfcopyOfout1_1.segment);
							}

							if (copyOfcopyOfcopyOfout1_1.ckd_cbu == null) {
								pstmt_tMysqlOutput_6.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(10,
										copyOfcopyOfcopyOfout1_1.ckd_cbu);
							}

							if (copyOfcopyOfcopyOfout1_1.pc_cv == null) {
								pstmt_tMysqlOutput_6.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(11,
										copyOfcopyOfcopyOfout1_1.pc_cv);
							}

							if (copyOfcopyOfcopyOfout1_1.engine_type == null) {
								pstmt_tMysqlOutput_6.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(12,
										copyOfcopyOfcopyOfout1_1.engine_type);
							}

							if (copyOfcopyOfcopyOfout1_1.type == null) {
								pstmt_tMysqlOutput_6.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(13,
										copyOfcopyOfcopyOfout1_1.type);
							}

							pstmt_tMysqlOutput_6.setInt(14,
									copyOfcopyOfcopyOfout1_1.displacement);

							pstmt_tMysqlOutput_6.setInt(15,
									copyOfcopyOfcopyOfout1_1.sales);

							if (copyOfcopyOfcopyOfout1_1.origine == null) {
								pstmt_tMysqlOutput_6.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(16,
										copyOfcopyOfcopyOfout1_1.origine);
							}

							if (copyOfcopyOfcopyOfout1_1.body_type == null) {
								pstmt_tMysqlOutput_6.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(17,
										copyOfcopyOfcopyOfout1_1.body_type);
							}

							pstmt_tMysqlOutput_6.setInt(18,
									copyOfcopyOfcopyOfout1_1.rsp);

							if (copyOfcopyOfcopyOfout1_1.suv_type == null) {
								pstmt_tMysqlOutput_6.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(19,
										copyOfcopyOfcopyOfout1_1.suv_type);
							}

							if (copyOfcopyOfcopyOfout1_1.price_class == null) {
								pstmt_tMysqlOutput_6.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(20,
										copyOfcopyOfcopyOfout1_1.price_class);
							}

							pstmt_tMysqlOutput_6.setInt(21,
									copyOfcopyOfcopyOfout1_1.log_id);

							if (copyOfcopyOfcopyOfout1_1.type_vh == null) {
								pstmt_tMysqlOutput_6.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(22,
										copyOfcopyOfcopyOfout1_1.type_vh);
							}

							if (copyOfcopyOfcopyOfout1_1.status == null) {
								pstmt_tMysqlOutput_6.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(23,
										copyOfcopyOfcopyOfout1_1.status);
							}

							if (copyOfcopyOfcopyOfout1_1.created_at == null) {
								pstmt_tMysqlOutput_6.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_6.setInt(24,
										copyOfcopyOfcopyOfout1_1.created_at);
							}

							if (copyOfcopyOfcopyOfout1_1.updated_at == null) {
								pstmt_tMysqlOutput_6.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_6.setInt(25,
										copyOfcopyOfcopyOfout1_1.updated_at);
							}

							pstmt_tMysqlOutput_6.setLong(
									26 + count_tMysqlOutput_6,
									copyOfcopyOfcopyOfout1_1.id);

							pstmt_tMysqlOutput_6.addBatch();
							nb_line_tMysqlOutput_6++;

							batchSizeCounter_tMysqlOutput_6++;

							if (!whetherReject_tMysqlOutput_6) {
							}
							if (batchSize_tMysqlOutput_6 <= batchSizeCounter_tMysqlOutput_6) {
								try {
									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
											.executeBatch()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									batchSizeCounter_tMysqlOutput_6 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_6++;

							if (commitEvery_tMysqlOutput_6 <= commitCounter_tMysqlOutput_6) {

								try {
									int countSum_tMysqlOutput_6 = 0;

									for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
											.executeBatch()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_6.commit();

								commitCounter_tMysqlOutput_6 = 0;

							}

							tos_count_tMysqlOutput_6++;

							/**
							 * [tMysqlOutput_6 main ] stop
							 */

						} // End of branch "copyOfcopyOfcopyOfout1_1"

						/**
						 * [tMysqlInput_6 end ] start
						 */

						currentComponent = "tMysqlInput_6";

					}
				} finally {
					if (rs_tMysqlInput_6 != null) {
						rs_tMysqlInput_6.close();
					}
					stmt_tMysqlInput_6.close();

					if (conn_tMysqlInput_6 != null
							&& !conn_tMysqlInput_6.isClosed()) {
						conn_tMysqlInput_6.close();
					}

				}
				globalMap.put("tMysqlInput_6_NB_LINE", nb_line_tMysqlInput_6);

				ok_Hash.put("tMysqlInput_6", true);
				end_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				/**
				 * [tMysqlInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMysqlOutput_6 end ] start
				 */

				currentComponent = "tMysqlOutput_6";

				try {
					if (pstmt_tMysqlOutput_6 != null) {
						int countSum_tMysqlOutput_6 = 0;

						for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
								.executeBatch()) {
							countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
									: countEach_tMysqlOutput_6);
						}

						updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_6 = 0;
					for (int countEach_tMysqlOutput_6 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
								: countEach_tMysqlOutput_6);
					}

					updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_6 != null) {

					pstmt_tMysqlOutput_6.close();

				}

				conn_tMysqlOutput_6.commit();

				conn_tMysqlOutput_6.close();
				resourceMap.put("finish_tMysqlOutput_6", true);

				nb_line_deleted_tMysqlOutput_6 = nb_line_deleted_tMysqlOutput_6
						+ deletedCount_tMysqlOutput_6;
				nb_line_update_tMysqlOutput_6 = nb_line_update_tMysqlOutput_6
						+ updatedCount_tMysqlOutput_6;
				nb_line_inserted_tMysqlOutput_6 = nb_line_inserted_tMysqlOutput_6
						+ insertedCount_tMysqlOutput_6;
				nb_line_rejected_tMysqlOutput_6 = nb_line_rejected_tMysqlOutput_6
						+ rejectedCount_tMysqlOutput_6;
				globalMap.put("tMysqlOutput_6_NB_LINE", nb_line_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_6);

				ok_Hash.put("tMysqlOutput_6", true);
				end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				tMysqlInput_7Process(globalMap);

				/**
				 * [tMysqlOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_6 finally ] start
				 */

				currentComponent = "tMysqlInput_6";

				/**
				 * [tMysqlInput_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMysqlOutput_6 finally ] start
				 */

				currentComponent = "tMysqlOutput_6";

				if (resourceMap.get("finish_tMysqlOutput_6") == null) {
					if (resourceMap.get("conn_tMysqlOutput_6") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_6")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_6) {
							System.out
									.println("failed to close the connection in tMysqlOutput_6 :"
											+ sqlEx_tMysqlOutput_6.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfout1_1Struct
			implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfout1_1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfout1_1Struct other = (copyOfcopyOfcopyOfcopyOfout1_1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfout1_1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfout1_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfout1_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_premium_segment = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_premium_segment = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_premium_segment.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_premium_segment.length == 0) {
						commonByteArray_DEMO_FAY_premium_segment = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_premium_segment = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_premium_segment, 0,
						length);
				strReturn = new String(
						commonByteArray_DEMO_FAY_premium_segment, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_premium_segment) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfcopyOfcopyOfcopyOfout1_1Struct copyOfcopyOfcopyOfcopyOfout1_1 = new copyOfcopyOfcopyOfcopyOfout1_1Struct();

				/**
				 * [tMysqlOutput_7 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_7", false);
				start_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_7";

				int tos_count_tMysqlOutput_7 = 0;

				int updateKeyCount_tMysqlOutput_7 = 1;
				if (updateKeyCount_tMysqlOutput_7 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_7 = 0;
				int nb_line_update_tMysqlOutput_7 = 0;
				int nb_line_inserted_tMysqlOutput_7 = 0;
				int nb_line_deleted_tMysqlOutput_7 = 0;
				int nb_line_rejected_tMysqlOutput_7 = 0;

				int deletedCount_tMysqlOutput_7 = 0;
				int updatedCount_tMysqlOutput_7 = 0;
				int insertedCount_tMysqlOutput_7 = 0;

				int rejectedCount_tMysqlOutput_7 = 0;

				String tableName_tMysqlOutput_7 = "items";
				boolean whetherReject_tMysqlOutput_7 = false;

				java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime()
						.getTime();
				calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7
						.getTime().getTime();
				long date_tMysqlOutput_7;

				java.sql.Connection conn_tMysqlOutput_7 = null;
				String dbProperties_tMysqlOutput_7 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_7 = null;
				if (dbProperties_tMysqlOutput_7 == null
						|| dbProperties_tMysqlOutput_7.trim().length() == 0) {
					url_tMysqlOutput_7 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_7 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_7;
				}
				String dbUser_tMysqlOutput_7 = "root";

				final String decryptedPassword_tMysqlOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_7 = decryptedPassword_tMysqlOutput_7;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_7 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_7, dbUser_tMysqlOutput_7,
						dbPwd_tMysqlOutput_7);

				resourceMap.put("conn_tMysqlOutput_7", conn_tMysqlOutput_7);
				conn_tMysqlOutput_7.setAutoCommit(false);
				int commitEvery_tMysqlOutput_7 = 10000;
				int commitCounter_tMysqlOutput_7 = 0;
				int batchSize_tMysqlOutput_7 = 10000;
				int batchSizeCounter_tMysqlOutput_7 = 0;

				int count_tMysqlOutput_7 = 0;

				String update_tMysqlOutput_7 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7
						.prepareStatement(update_tMysqlOutput_7);

				/**
				 * [tMysqlOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfout1_1Struct copyOfcopyOfcopyOfcopyOfout1_1_tmp = new copyOfcopyOfcopyOfcopyOfout1_1Struct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMysqlInput_7 begin ] start
				 */

				ok_Hash.put("tMysqlInput_7", false);
				start_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				currentComponent = "tMysqlInput_7";

				int tos_count_tMysqlInput_7 = 0;

				java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7
						.getTime();
				int nb_line_tMysqlInput_7 = 0;
				java.sql.Connection conn_tMysqlInput_7 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_7 = "root";

				final String decryptedPassword_tMysqlInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_7 = decryptedPassword_tMysqlInput_7;

				String url_tMysqlInput_7 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_7, dbUser_tMysqlInput_7,
						dbPwd_tMysqlInput_7);

				java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7
						.createStatement();

				String dbquery_tMysqlInput_7 = "SELECT \r\n  `items`.`id`, \r\n  `items`.`year`, \r\n  `items`.`month`, \r\n  `items`.`city`, \r\n  `items`.`group`, \r\n  `items`.`make`, \r\n  `items`.`premium_segment`, \r\n  `items`.`model_gnr`, \r\n  `items`.`model`, \r\n  `items`.`segment`, \r\n  `items`.`ckd_cbu`, \r\n  `items`.`pc_cv`, \r\n  `items`.`engine_type`, \r\n  `items`.`type`, \r\n  `items`.`displacement`, \r\n  `items`.`sales`, \r\n  `items`.`origine`, \r\n  `items`.`body_type`, \r\n  `items`.`rsp`, \r\n  `items`.`suv_type`, \r\n  `items`.`price_class`, \r\n  `items`.`log_id`, \r\n  `items`.`type_vh`, \r\n  `items`.`status`, \r\n  `items`.`created_at`, \r\n  `items`.`updated_at`\r\nFROM `items`\r\nWHERE  `items`.`make` IN ('AUDI', 'BMW', 'MERCEDES', 'JAGUAR', 'LEXUS', 'VOLVO', 'PORSCHE', 'MINI',\r\n 'LAND ROVER','HUMMER')\r\nAND `items`.`segment` = 'Luxury'";

				globalMap.put("tMysqlInput_7_QUERY", dbquery_tMysqlInput_7);
				java.sql.ResultSet rs_tMysqlInput_7 = null;
				try {
					rs_tMysqlInput_7 = stmt_tMysqlInput_7
							.executeQuery(dbquery_tMysqlInput_7);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7
							.getMetaData();
					int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7
							.getColumnCount();

					String tmpContent_tMysqlInput_7 = null;

					while (rs_tMysqlInput_7.next()) {
						nb_line_tMysqlInput_7++;

						if (colQtyInRs_tMysqlInput_7 < 1) {
							row7.id = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(1) != null) {
								row7.id = rs_tMysqlInput_7.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 2) {
							row7.year = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(2) != null) {
								row7.year = rs_tMysqlInput_7.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 3) {
							row7.month = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(3) != null) {
								row7.month = rs_tMysqlInput_7.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 4) {
							row7.city = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(4);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.city = tmpContent_tMysqlInput_7;
							} else {
								row7.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 5) {
							row7.group = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(5);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.group = tmpContent_tMysqlInput_7;
							} else {
								row7.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 6) {
							row7.make = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(6);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.make = tmpContent_tMysqlInput_7;
							} else {
								row7.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 7) {
							row7.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(7);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.premium_segment = tmpContent_tMysqlInput_7;
							} else {
								row7.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 8) {
							row7.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(8);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.model_gnr = tmpContent_tMysqlInput_7;
							} else {
								row7.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 9) {
							row7.model = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(9);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.model = tmpContent_tMysqlInput_7;
							} else {
								row7.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 10) {
							row7.segment = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(10);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.segment = tmpContent_tMysqlInput_7;
							} else {
								row7.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 11) {
							row7.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(11);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.ckd_cbu = tmpContent_tMysqlInput_7;
							} else {
								row7.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 12) {
							row7.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(12);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.pc_cv = tmpContent_tMysqlInput_7;
							} else {
								row7.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 13) {
							row7.engine_type = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(13);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.engine_type = tmpContent_tMysqlInput_7;
							} else {
								row7.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 14) {
							row7.type = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(14);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.type = tmpContent_tMysqlInput_7;
							} else {
								row7.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 15) {
							row7.displacement = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(15) != null) {
								row7.displacement = rs_tMysqlInput_7.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 16) {
							row7.sales = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(16) != null) {
								row7.sales = rs_tMysqlInput_7.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 17) {
							row7.origine = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(17);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.origine = tmpContent_tMysqlInput_7;
							} else {
								row7.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 18) {
							row7.body_type = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(18);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.body_type = tmpContent_tMysqlInput_7;
							} else {
								row7.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 19) {
							row7.rsp = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(19) != null) {
								row7.rsp = rs_tMysqlInput_7.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 20) {
							row7.suv_type = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(20);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.suv_type = tmpContent_tMysqlInput_7;
							} else {
								row7.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 21) {
							row7.price_class = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(21);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.price_class = tmpContent_tMysqlInput_7;
							} else {
								row7.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 22) {
							row7.log_id = 0;
						} else {

							if (rs_tMysqlInput_7.getObject(22) != null) {
								row7.log_id = rs_tMysqlInput_7.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 23) {
							row7.type_vh = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(23);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.type_vh = tmpContent_tMysqlInput_7;
							} else {
								row7.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 24) {
							row7.status = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(24);
							if (tmpContent_tMysqlInput_7 != null) {
								row7.status = tmpContent_tMysqlInput_7;
							} else {
								row7.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 25) {
							row7.created_at = null;
						} else {

							if (rs_tMysqlInput_7.getObject(25) != null) {
								row7.created_at = rs_tMysqlInput_7.getInt(25);
							} else {
								row7.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_7 < 26) {
							row7.updated_at = null;
						} else {

							if (rs_tMysqlInput_7.getObject(26) != null) {
								row7.updated_at = rs_tMysqlInput_7.getInt(26);
							} else {
								row7.updated_at = null;
							}
						}

						/**
						 * [tMysqlInput_7 begin ] stop
						 */
						/**
						 * [tMysqlInput_7 main ] start
						 */

						currentComponent = "tMysqlInput_7";

						tos_count_tMysqlInput_7++;

						/**
						 * [tMysqlInput_7 main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfcopyOfcopyOfout1_1 = null;

							// # Output table : 'copyOfcopyOfcopyOfcopyOfout1_1'
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.id = row7.id;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.year = row7.year;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.month = row7.month;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.city = row7.city;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.group = row7.group;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.make = row7.make;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.premium_segment = "Premium Luxury";
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.model_gnr = row7.model_gnr;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.model = row7.model;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.segment = row7.segment;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.ckd_cbu = row7.ckd_cbu;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.pc_cv = row7.pc_cv;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.engine_type = row7.engine_type;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.type = row7.type;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.displacement = row7.displacement;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.sales = row7.sales;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.origine = row7.origine;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.body_type = row7.body_type;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.rsp = row7.rsp;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.suv_type = row7.suv_type;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.price_class = row7.price_class;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.log_id = row7.log_id;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.type_vh = row7.type_vh;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.status = row7.status;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.created_at = null;
							copyOfcopyOfcopyOfcopyOfout1_1_tmp.updated_at = null;
							copyOfcopyOfcopyOfcopyOfout1_1 = copyOfcopyOfcopyOfcopyOfout1_1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_7 = false;

						tos_count_tMap_7++;

						/**
						 * [tMap_7 main ] stop
						 */
						// Start of branch "copyOfcopyOfcopyOfcopyOfout1_1"
						if (copyOfcopyOfcopyOfcopyOfout1_1 != null) {

							/**
							 * [tMysqlOutput_7 main ] start
							 */

							currentComponent = "tMysqlOutput_7";

							whetherReject_tMysqlOutput_7 = false;
							pstmt_tMysqlOutput_7.setInt(1,
									copyOfcopyOfcopyOfcopyOfout1_1.year);

							pstmt_tMysqlOutput_7.setInt(2,
									copyOfcopyOfcopyOfcopyOfout1_1.month);

							if (copyOfcopyOfcopyOfcopyOfout1_1.city == null) {
								pstmt_tMysqlOutput_7.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(3,
										copyOfcopyOfcopyOfcopyOfout1_1.city);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.group == null) {
								pstmt_tMysqlOutput_7.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(4,
										copyOfcopyOfcopyOfcopyOfout1_1.group);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.make == null) {
								pstmt_tMysqlOutput_7.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(5,
										copyOfcopyOfcopyOfcopyOfout1_1.make);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.premium_segment == null) {
								pstmt_tMysqlOutput_7.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												6,
												copyOfcopyOfcopyOfcopyOfout1_1.premium_segment);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.model_gnr == null) {
								pstmt_tMysqlOutput_7.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												7,
												copyOfcopyOfcopyOfcopyOfout1_1.model_gnr);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.model == null) {
								pstmt_tMysqlOutput_7.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(8,
										copyOfcopyOfcopyOfcopyOfout1_1.model);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.segment == null) {
								pstmt_tMysqlOutput_7.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(9,
										copyOfcopyOfcopyOfcopyOfout1_1.segment);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.ckd_cbu == null) {
								pstmt_tMysqlOutput_7.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(10,
										copyOfcopyOfcopyOfcopyOfout1_1.ckd_cbu);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.pc_cv == null) {
								pstmt_tMysqlOutput_7.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(11,
										copyOfcopyOfcopyOfcopyOfout1_1.pc_cv);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.engine_type == null) {
								pstmt_tMysqlOutput_7.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												12,
												copyOfcopyOfcopyOfcopyOfout1_1.engine_type);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.type == null) {
								pstmt_tMysqlOutput_7.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(13,
										copyOfcopyOfcopyOfcopyOfout1_1.type);
							}

							pstmt_tMysqlOutput_7
									.setInt(14,
											copyOfcopyOfcopyOfcopyOfout1_1.displacement);

							pstmt_tMysqlOutput_7.setInt(15,
									copyOfcopyOfcopyOfcopyOfout1_1.sales);

							if (copyOfcopyOfcopyOfcopyOfout1_1.origine == null) {
								pstmt_tMysqlOutput_7.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(16,
										copyOfcopyOfcopyOfcopyOfout1_1.origine);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.body_type == null) {
								pstmt_tMysqlOutput_7.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												17,
												copyOfcopyOfcopyOfcopyOfout1_1.body_type);
							}

							pstmt_tMysqlOutput_7.setInt(18,
									copyOfcopyOfcopyOfcopyOfout1_1.rsp);

							if (copyOfcopyOfcopyOfcopyOfout1_1.suv_type == null) {
								pstmt_tMysqlOutput_7.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												19,
												copyOfcopyOfcopyOfcopyOfout1_1.suv_type);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.price_class == null) {
								pstmt_tMysqlOutput_7.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7
										.setString(
												20,
												copyOfcopyOfcopyOfcopyOfout1_1.price_class);
							}

							pstmt_tMysqlOutput_7.setInt(21,
									copyOfcopyOfcopyOfcopyOfout1_1.log_id);

							if (copyOfcopyOfcopyOfcopyOfout1_1.type_vh == null) {
								pstmt_tMysqlOutput_7.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(22,
										copyOfcopyOfcopyOfcopyOfout1_1.type_vh);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.status == null) {
								pstmt_tMysqlOutput_7.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_7.setString(23,
										copyOfcopyOfcopyOfcopyOfout1_1.status);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.created_at == null) {
								pstmt_tMysqlOutput_7.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_7
										.setInt(24,
												copyOfcopyOfcopyOfcopyOfout1_1.created_at);
							}

							if (copyOfcopyOfcopyOfcopyOfout1_1.updated_at == null) {
								pstmt_tMysqlOutput_7.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_7
										.setInt(25,
												copyOfcopyOfcopyOfcopyOfout1_1.updated_at);
							}

							pstmt_tMysqlOutput_7.setLong(
									26 + count_tMysqlOutput_7,
									copyOfcopyOfcopyOfcopyOfout1_1.id);

							pstmt_tMysqlOutput_7.addBatch();
							nb_line_tMysqlOutput_7++;

							batchSizeCounter_tMysqlOutput_7++;

							if (batchSize_tMysqlOutput_7 <= batchSizeCounter_tMysqlOutput_7) {
								try {
									int countSum_tMysqlOutput_7 = 0;
									for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
											.executeBatch()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

									batchSizeCounter_tMysqlOutput_7 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_7 = 0;
									for (int countEach_tMysqlOutput_7 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_7++;

							if (commitEvery_tMysqlOutput_7 <= commitCounter_tMysqlOutput_7) {

								try {
									int countSum_tMysqlOutput_7 = 0;

									for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
											.executeBatch()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_7 = 0;
									for (int countEach_tMysqlOutput_7 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_7.commit();

								commitCounter_tMysqlOutput_7 = 0;

							}

							tos_count_tMysqlOutput_7++;

							/**
							 * [tMysqlOutput_7 main ] stop
							 */

						} // End of branch "copyOfcopyOfcopyOfcopyOfout1_1"

						/**
						 * [tMysqlInput_7 end ] start
						 */

						currentComponent = "tMysqlInput_7";

					}
				} finally {
					if (rs_tMysqlInput_7 != null) {
						rs_tMysqlInput_7.close();
					}
					stmt_tMysqlInput_7.close();

					if (conn_tMysqlInput_7 != null
							&& !conn_tMysqlInput_7.isClosed()) {
						conn_tMysqlInput_7.close();
					}

				}
				globalMap.put("tMysqlInput_7_NB_LINE", nb_line_tMysqlInput_7);

				ok_Hash.put("tMysqlInput_7", true);
				end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				/**
				 * [tMysqlInput_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMysqlOutput_7 end ] start
				 */

				currentComponent = "tMysqlOutput_7";

				try {
					if (pstmt_tMysqlOutput_7 != null) {
						int countSum_tMysqlOutput_7 = 0;

						for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
								.executeBatch()) {
							countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
									: countEach_tMysqlOutput_7);
						}

						updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_7 = 0;
					for (int countEach_tMysqlOutput_7 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
								: countEach_tMysqlOutput_7);
					}

					updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_7 != null) {

					pstmt_tMysqlOutput_7.close();

				}

				conn_tMysqlOutput_7.commit();

				conn_tMysqlOutput_7.close();
				resourceMap.put("finish_tMysqlOutput_7", true);

				nb_line_deleted_tMysqlOutput_7 = nb_line_deleted_tMysqlOutput_7
						+ deletedCount_tMysqlOutput_7;
				nb_line_update_tMysqlOutput_7 = nb_line_update_tMysqlOutput_7
						+ updatedCount_tMysqlOutput_7;
				nb_line_inserted_tMysqlOutput_7 = nb_line_inserted_tMysqlOutput_7
						+ insertedCount_tMysqlOutput_7;
				nb_line_rejected_tMysqlOutput_7 = nb_line_rejected_tMysqlOutput_7
						+ rejectedCount_tMysqlOutput_7;
				globalMap.put("tMysqlOutput_7_NB_LINE", nb_line_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_7);

				ok_Hash.put("tMysqlOutput_7", true);
				end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_7 finally ] start
				 */

				currentComponent = "tMysqlInput_7";

				/**
				 * [tMysqlInput_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tMysqlOutput_7 finally ] start
				 */

				currentComponent = "tMysqlOutput_7";

				if (resourceMap.get("finish_tMysqlOutput_7") == null) {
					if (resourceMap.get("conn_tMysqlOutput_7") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_7")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_7) {
							System.out
									.println("failed to close the connection in tMysqlOutput_7 :"
											+ sqlEx_tMysqlOutput_7.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final premium_segment premium_segmentClass = new premium_segment();

		int exitCode = premium_segmentClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = premium_segment.class
					.getClassLoader().getResourceAsStream(
							"demo_fay/premium_segment_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.log_id = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("log_id"));
			} catch (NumberFormatException e) {
				context.log_id = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("log_id")) {
				context.log_id = (Integer) parentContextMap.get("log_id");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : premium_segment");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 417710 characters generated by Talend Open Studio for Data Integration on the
 * November 28, 2015 11:41:09 PM GMT
 ************************************************************************************************/
