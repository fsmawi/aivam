// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo_fay.main_process_0_1;

import routines.DataOperation;
import routines.DqStringHandling;
import routines.GetRandomPhoneNum;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MDM;
import routines.DQTechnical;
import routines.Mathematical;
import routines.Relational;
import routines.DemoRoutines;
import routines.TalendDate;
import routines.SQLike;
import routines.DataQuality;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: main_process Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class main_process implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (file_brute != null) {

				this.setProperty("file_brute", file_brute.toString());

			}

			if (log_id != null) {

				this.setProperty("log_id", log_id.toString());

			}

		}

		public String file_brute;

		public String getFile_brute() {
			return this.file_brute;
		}

		public Integer log_id;

		public Integer getLog_id() {
			return this.log_id;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "main_process";
	private final String projectName = "DEMO_FAY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					main_process.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(main_process.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class copyOfout02Struct implements
			routines.system.IPersistableRow<copyOfout02Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_main_process = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_main_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		public Integer nb_portes;

		public Integer getNb_portes() {
			return this.nb_portes;
		}

		public Integer nb_places;

		public Integer getNb_places() {
			return this.nb_places;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfout02Struct other = (copyOfout02Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(copyOfout02Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;
			other.nb_portes = this.nb_portes;
			other.nb_places = this.nb_places;

		}

		public void copyKeysDataTo(copyOfout02Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_main_process.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_main_process.length == 0) {
						commonByteArray_DEMO_FAY_main_process = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_main_process = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_main_process, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_main_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_main_process) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

					this.nb_portes = readInteger(dis);

					this.nb_places = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

				// Integer

				writeInteger(this.nb_portes, dos);

				// Integer

				writeInteger(this.nb_places, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append(",nb_portes=" + String.valueOf(nb_portes));
			sb.append(",nb_places=" + String.valueOf(nb_places));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout02Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_main_process = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_main_process = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public Integer B;

		public Integer getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public String F;

		public String getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		public String I;

		public String getI() {
			return this.I;
		}

		public Integer J;

		public Integer getJ() {
			return this.J;
		}

		public Integer K;

		public Integer getK() {
			return this.K;
		}

		public String L;

		public String getL() {
			return this.L;
		}

		public Integer M;

		public Integer getM() {
			return this.M;
		}

		public Float N;

		public Float getN() {
			return this.N;
		}

		public String O;

		public String getO() {
			return this.O;
		}

		public String P;

		public String getP() {
			return this.P;
		}

		public Integer Q;

		public Integer getQ() {
			return this.Q;
		}

		public Float R;

		public Float getR() {
			return this.R;
		}

		public Float S;

		public Float getS() {
			return this.S;
		}

		public Float T;

		public Float getT() {
			return this.T;
		}

		public Integer U;

		public Integer getU() {
			return this.U;
		}

		public Integer V;

		public Integer getV() {
			return this.V;
		}

		public Integer W;

		public Integer getW() {
			return this.W;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_main_process.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_main_process.length == 0) {
						commonByteArray_DEMO_FAY_main_process = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_main_process = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_main_process, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_main_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_main_process) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readInteger(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readString(dis);

					this.G = readString(dis);

					this.H = readString(dis);

					this.I = readString(dis);

					this.J = readInteger(dis);

					this.K = readInteger(dis);

					this.L = readString(dis);

					this.M = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.N = null;
					} else {
						this.N = dis.readFloat();
					}

					this.O = readString(dis);

					this.P = readString(dis);

					this.Q = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.R = null;
					} else {
						this.R = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.S = null;
					} else {
						this.S = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readFloat();
					}

					this.U = readInteger(dis);

					this.V = readInteger(dis);

					this.W = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// Integer

				writeInteger(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// String

				writeString(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

				// String

				writeString(this.I, dos);

				// Integer

				writeInteger(this.J, dos);

				// Integer

				writeInteger(this.K, dos);

				// String

				writeString(this.L, dos);

				// Integer

				writeInteger(this.M, dos);

				// Float

				if (this.N == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.N);
				}

				// String

				writeString(this.O, dos);

				// String

				writeString(this.P, dos);

				// Integer

				writeInteger(this.Q, dos);

				// Float

				if (this.R == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.R);
				}

				// Float

				if (this.S == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.S);
				}

				// Float

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.T);
				}

				// Integer

				writeInteger(this.U, dos);

				// Integer

				writeInteger(this.V, dos);

				// Integer

				writeInteger(this.W, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + String.valueOf(B));
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + F);
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append(",I=" + I);
			sb.append(",J=" + String.valueOf(J));
			sb.append(",K=" + String.valueOf(K));
			sb.append(",L=" + L);
			sb.append(",M=" + String.valueOf(M));
			sb.append(",N=" + String.valueOf(N));
			sb.append(",O=" + O);
			sb.append(",P=" + P);
			sb.append(",Q=" + String.valueOf(Q));
			sb.append(",R=" + String.valueOf(R));
			sb.append(",S=" + String.valueOf(S));
			sb.append(",T=" + String.valueOf(T));
			sb.append(",U=" + String.valueOf(U));
			sb.append(",V=" + String.valueOf(V));
			sb.append(",W=" + String.valueOf(W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfout02Struct copyOfout02 = new copyOfout02Struct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "items_temp";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_3;
				}
				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				String insert_tMysqlOutput_3 = "INSERT INTO `"
						+ "items_temp"
						+ "` (`id`,`year`,`month`,`city`,`group`,`make`,`premium_segment`,`model_gnr`,`model`,`segment`,`ckd_cbu`,`pc_cv`,`engine_type`,`type`,`displacement`,`sales`,`origine`,`body_type`,`rsp`,`suv_type`,`price_class`,`log_id`,`type_vh`,`status`,`created_at`,`updated_at`,`nb_portes`,`nb_places`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_3 = 100;
				int batchSizeCounter_tMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insert_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout02Struct copyOfout02_tmp = new copyOfout02Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_3 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_3.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_3.setEncoding("UTF-8");

				Object source_tFileInputExcel_3 = "C:/wamp/www/aivam/public/files/"
						+ context.file_brute;
				final jxl.Workbook workbook_tFileInputExcel_3;

				java.io.InputStream toClose_tFileInputExcel_3 = null;
				try {
					if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_3 = (java.io.InputStream) source_tFileInputExcel_3;
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_3),
								workbookSettings_tFileInputExcel_3);
					} else if (source_tFileInputExcel_3 instanceof String) {
						toClose_tFileInputExcel_3 = new java.io.FileInputStream(
								source_tFileInputExcel_3.toString());
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_3),
								workbookSettings_tFileInputExcel_3);
					} else {
						workbook_tFileInputExcel_3 = null;

						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					if (toClose_tFileInputExcel_3 != null) {
						toClose_tFileInputExcel_3.close();
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_3
							.addAll(regexUtil_tFileInputExcel_3.getSheets(
									workbook_tFileInputExcel_3, "Brut Vp",
									false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {

						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_3
									.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheet_FilterNullList_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 1;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += sheet_tFileInputExcel_3
									.getRows();
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_3 = null;
						jxl.Sheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_3 = df_tFileInputExcel_3
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1
									&& nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3
									+ currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRows();
							}
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3
												- rowCount_tFileInputExcel_3);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET",
									sheet_tFileInputExcel_3.getName());
							row3 = null;
							String[] temp_row_tFileInputExcel_3 = new String[23];
							int actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > row_tFileInputExcel_3.length ? row_tFileInputExcel_3.length
									: end_column_tFileInputExcel_3;
							for (int i = 0; i < 23; i++) {

								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {

									jxl.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3[i
											+ start_column_tFileInputExcel_3];
									temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
											.getContents();

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_3 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								if (temp_row_tFileInputExcel_3[0].length() > 0) {
									curColNum_tFileInputExcel_3 = 0 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "A";
									row3.A = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[0]);
								} else {
									row3.A = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[1].length() > 0) {
									curColNum_tFileInputExcel_3 = 1 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "B";
									row3.B = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[1]);
								} else {
									row3.B = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[2].length() > 0) {
									curColNum_tFileInputExcel_3 = 2 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "C";
									row3.C = temp_row_tFileInputExcel_3[2];
								} else {
									row3.C = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[3].length() > 0) {
									curColNum_tFileInputExcel_3 = 3 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "D";
									row3.D = temp_row_tFileInputExcel_3[3];
								} else {
									row3.D = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[4].length() > 0) {
									curColNum_tFileInputExcel_3 = 4 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "E";
									row3.E = temp_row_tFileInputExcel_3[4];
								} else {
									row3.E = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[5].length() > 0) {
									curColNum_tFileInputExcel_3 = 5 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "F";
									row3.F = temp_row_tFileInputExcel_3[5];
								} else {
									row3.F = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[6].length() > 0) {
									curColNum_tFileInputExcel_3 = 6 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "G";
									row3.G = temp_row_tFileInputExcel_3[6];
								} else {
									row3.G = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[7].length() > 0) {
									curColNum_tFileInputExcel_3 = 7 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "H";
									row3.H = temp_row_tFileInputExcel_3[7];
								} else {
									row3.H = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[8].length() > 0) {
									curColNum_tFileInputExcel_3 = 8 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "I";
									row3.I = temp_row_tFileInputExcel_3[8];
								} else {
									row3.I = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[9].length() > 0) {
									curColNum_tFileInputExcel_3 = 9 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "J";
									row3.J = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[9]);
								} else {
									row3.J = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[10].length() > 0) {
									curColNum_tFileInputExcel_3 = 10 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "K";
									row3.K = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[10]);
								} else {
									row3.K = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[11].length() > 0) {
									curColNum_tFileInputExcel_3 = 11 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "L";
									row3.L = temp_row_tFileInputExcel_3[11];
								} else {
									row3.L = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[12].length() > 0) {
									curColNum_tFileInputExcel_3 = 12 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "M";
									row3.M = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[12]);
								} else {
									row3.M = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[13].length() > 0) {
									curColNum_tFileInputExcel_3 = 13 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "N";
									row3.N = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[13]);
								} else {
									row3.N = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[14].length() > 0) {
									curColNum_tFileInputExcel_3 = 14 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "O";
									row3.O = temp_row_tFileInputExcel_3[14];
								} else {
									row3.O = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[15].length() > 0) {
									curColNum_tFileInputExcel_3 = 15 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "P";
									row3.P = temp_row_tFileInputExcel_3[15];
								} else {
									row3.P = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[16].length() > 0) {
									curColNum_tFileInputExcel_3 = 16 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Q";
									row3.Q = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[16]);
								} else {
									row3.Q = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[17].length() > 0) {
									curColNum_tFileInputExcel_3 = 17 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "R";
									row3.R = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[17]);
								} else {
									row3.R = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[18].length() > 0) {
									curColNum_tFileInputExcel_3 = 18 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "S";
									row3.S = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[18]);
								} else {
									row3.S = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[19].length() > 0) {
									curColNum_tFileInputExcel_3 = 19 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "T";
									row3.T = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[19]);
								} else {
									row3.T = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[20].length() > 0) {
									curColNum_tFileInputExcel_3 = 20 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "U";
									row3.U = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[20]);
								} else {
									row3.U = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[21].length() > 0) {
									curColNum_tFileInputExcel_3 = 21 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "V";
									row3.V = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[21]);
								} else {
									row3.V = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								if (temp_row_tFileInputExcel_3[22].length() > 0) {
									curColNum_tFileInputExcel_3 = 22 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "W";
									row3.W = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[22]);
								} else {
									row3.W = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */
							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									copyOfout02 = null;

									// # Output table : 'copyOfout02'
									copyOfout02_tmp.id = 0;
									copyOfout02_tmp.year = row3.A;
									copyOfout02_tmp.month = row3.B;
									copyOfout02_tmp.city = row3.C;
									copyOfout02_tmp.group = "0";
									copyOfout02_tmp.make = row3.D;
									copyOfout02_tmp.premium_segment = "0";
									copyOfout02_tmp.model_gnr = "0";
									copyOfout02_tmp.model = row3.E;
									copyOfout02_tmp.segment = "0";
									copyOfout02_tmp.ckd_cbu = row3.G;
									copyOfout02_tmp.pc_cv = "PC";
									copyOfout02_tmp.engine_type = row3.P;
									copyOfout02_tmp.type = row3.F;
									copyOfout02_tmp.displacement = row3.Q;
									copyOfout02_tmp.sales = row3.W;
									copyOfout02_tmp.origine = "0";
									copyOfout02_tmp.body_type = "0";
									copyOfout02_tmp.rsp = row3.V;
									copyOfout02_tmp.suv_type = "0";
									copyOfout02_tmp.price_class = "0";
									copyOfout02_tmp.log_id = context.log_id;
									copyOfout02_tmp.type_vh = "VP";
									copyOfout02_tmp.status = "ko";
									copyOfout02_tmp.created_at = null;
									copyOfout02_tmp.updated_at = null;
									copyOfout02_tmp.nb_portes = row3.J;
									copyOfout02_tmp.nb_places = row3.K;
									copyOfout02 = copyOfout02_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "copyOfout02"
								if (copyOfout02 != null) {

									/**
									 * [tMysqlOutput_3 main ] start
									 */

									currentComponent = "tMysqlOutput_3";

									whetherReject_tMysqlOutput_3 = false;
									pstmt_tMysqlOutput_3.setLong(1,
											copyOfout02.id);

									pstmt_tMysqlOutput_3.setInt(2,
											copyOfout02.year);

									pstmt_tMysqlOutput_3.setInt(3,
											copyOfout02.month);

									if (copyOfout02.city == null) {
										pstmt_tMysqlOutput_3.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(4,
												copyOfout02.city);
									}

									if (copyOfout02.group == null) {
										pstmt_tMysqlOutput_3.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(5,
												copyOfout02.group);
									}

									if (copyOfout02.make == null) {
										pstmt_tMysqlOutput_3.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(6,
												copyOfout02.make);
									}

									if (copyOfout02.premium_segment == null) {
										pstmt_tMysqlOutput_3.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(7,
												copyOfout02.premium_segment);
									}

									if (copyOfout02.model_gnr == null) {
										pstmt_tMysqlOutput_3.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(8,
												copyOfout02.model_gnr);
									}

									if (copyOfout02.model == null) {
										pstmt_tMysqlOutput_3.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(9,
												copyOfout02.model);
									}

									if (copyOfout02.segment == null) {
										pstmt_tMysqlOutput_3.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(10,
												copyOfout02.segment);
									}

									if (copyOfout02.ckd_cbu == null) {
										pstmt_tMysqlOutput_3.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(11,
												copyOfout02.ckd_cbu);
									}

									if (copyOfout02.pc_cv == null) {
										pstmt_tMysqlOutput_3.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(12,
												copyOfout02.pc_cv);
									}

									if (copyOfout02.engine_type == null) {
										pstmt_tMysqlOutput_3.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(13,
												copyOfout02.engine_type);
									}

									if (copyOfout02.type == null) {
										pstmt_tMysqlOutput_3.setNull(14,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(14,
												copyOfout02.type);
									}

									pstmt_tMysqlOutput_3.setInt(15,
											copyOfout02.displacement);

									pstmt_tMysqlOutput_3.setInt(16,
											copyOfout02.sales);

									if (copyOfout02.origine == null) {
										pstmt_tMysqlOutput_3.setNull(17,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(17,
												copyOfout02.origine);
									}

									if (copyOfout02.body_type == null) {
										pstmt_tMysqlOutput_3.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(18,
												copyOfout02.body_type);
									}

									pstmt_tMysqlOutput_3.setInt(19,
											copyOfout02.rsp);

									if (copyOfout02.suv_type == null) {
										pstmt_tMysqlOutput_3.setNull(20,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(20,
												copyOfout02.suv_type);
									}

									if (copyOfout02.price_class == null) {
										pstmt_tMysqlOutput_3.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(21,
												copyOfout02.price_class);
									}

									pstmt_tMysqlOutput_3.setInt(22,
											copyOfout02.log_id);

									if (copyOfout02.type_vh == null) {
										pstmt_tMysqlOutput_3.setNull(23,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(23,
												copyOfout02.type_vh);
									}

									if (copyOfout02.status == null) {
										pstmt_tMysqlOutput_3.setNull(24,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_3.setString(24,
												copyOfout02.status);
									}

									if (copyOfout02.created_at == null) {
										pstmt_tMysqlOutput_3.setNull(25,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_3.setInt(25,
												copyOfout02.created_at);
									}

									if (copyOfout02.updated_at == null) {
										pstmt_tMysqlOutput_3.setNull(26,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_3.setInt(26,
												copyOfout02.updated_at);
									}

									if (copyOfout02.nb_portes == null) {
										pstmt_tMysqlOutput_3.setNull(27,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_3.setInt(27,
												copyOfout02.nb_portes);
									}

									if (copyOfout02.nb_places == null) {
										pstmt_tMysqlOutput_3.setNull(28,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_3.setInt(28,
												copyOfout02.nb_places);
									}

									pstmt_tMysqlOutput_3.addBatch();
									nb_line_tMysqlOutput_3++;

									batchSizeCounter_tMysqlOutput_3++;

									if (!whetherReject_tMysqlOutput_3) {
									}
									if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
										try {
											int countSum_tMysqlOutput_3 = 0;
											for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
													.executeBatch()) {
												countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
														: 1);
											}

											insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tMysqlOutput_3 = 0;
											for (int countEach_tMysqlOutput_3 : e
													.getUpdateCounts()) {
												countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
														: countEach_tMysqlOutput_3);
											}

											insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

											System.err.println(e.getMessage());

										}

										batchSizeCounter_tMysqlOutput_3 = 0;
									}

									commitCounter_tMysqlOutput_3++;

									if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

										try {
											int countSum_tMysqlOutput_3 = 0;

											for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
													.executeBatch()) {
												countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
														: 1);
											}

											insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tMysqlOutput_3 = 0;
											for (int countEach_tMysqlOutput_3 : e
													.getUpdateCounts()) {
												countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
														: countEach_tMysqlOutput_3);
											}

											insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

											System.out.println(e.getMessage());

										}

										conn_tMysqlOutput_3.commit();

										commitCounter_tMysqlOutput_3 = 0;

									}

									tos_count_tMysqlOutput_3++;

									/**
									 * [tMysqlOutput_3 main ] stop
									 */

								} // End of branch "copyOfout02"

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE",
								nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.close();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (batchSizeCounter_tMysqlOutput_3 != 0) {
						int countSum_tMysqlOutput_3 = 0;
						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_3 = 0;

				try {
					if (pstmt_tMysqlOutput_3 != null) {
						int countSum_tMysqlOutput_3 = 0;

						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				conn_tMysqlOutput_3.commit();

				conn_tMysqlOutput_3.close();
				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;
				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				tFileInputExcel_2Process(globalMap);

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (resourceMap.get("finish_tMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tMysqlOutput_3") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_3")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
							System.out
									.println("failed to close the connection in tMysqlOutput_3 :"
											+ sqlEx_tMysqlOutput_3.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public static class out02Struct implements
			routines.system.IPersistableRow<out02Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_main_process = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_main_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		public Integer nb_portes;

		public Integer getNb_portes() {
			return this.nb_portes;
		}

		public Integer nb_places;

		public Integer getNb_places() {
			return this.nb_places;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out02Struct other = (out02Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(out02Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;
			other.nb_portes = this.nb_portes;
			other.nb_places = this.nb_places;

		}

		public void copyKeysDataTo(out02Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_main_process.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_main_process.length == 0) {
						commonByteArray_DEMO_FAY_main_process = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_main_process = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_main_process, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_main_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_main_process) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

					this.nb_portes = readInteger(dis);

					this.nb_places = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

				// Integer

				writeInteger(this.nb_portes, dos);

				// Integer

				writeInteger(this.nb_places, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append(",nb_portes=" + String.valueOf(nb_portes));
			sb.append(",nb_places=" + String.valueOf(nb_places));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out02Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_main_process = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_main_process = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public Integer B;

		public Integer getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public String F;

		public String getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		public String I;

		public String getI() {
			return this.I;
		}

		public Integer J;

		public Integer getJ() {
			return this.J;
		}

		public Integer K;

		public Integer getK() {
			return this.K;
		}

		public String L;

		public String getL() {
			return this.L;
		}

		public Integer M;

		public Integer getM() {
			return this.M;
		}

		public Float N;

		public Float getN() {
			return this.N;
		}

		public String O;

		public String getO() {
			return this.O;
		}

		public String P;

		public String getP() {
			return this.P;
		}

		public Integer Q;

		public Integer getQ() {
			return this.Q;
		}

		public Float R;

		public Float getR() {
			return this.R;
		}

		public Float S;

		public Float getS() {
			return this.S;
		}

		public Float T;

		public Float getT() {
			return this.T;
		}

		public Integer U;

		public Integer getU() {
			return this.U;
		}

		public Integer V;

		public Integer getV() {
			return this.V;
		}

		public Integer W;

		public Integer getW() {
			return this.W;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_main_process.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_main_process.length == 0) {
						commonByteArray_DEMO_FAY_main_process = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_main_process = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_main_process, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_main_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_main_process) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readInteger(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readString(dis);

					this.G = readString(dis);

					this.H = readString(dis);

					this.I = readString(dis);

					this.J = readInteger(dis);

					this.K = readInteger(dis);

					this.L = readString(dis);

					this.M = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.N = null;
					} else {
						this.N = dis.readFloat();
					}

					this.O = readString(dis);

					this.P = readString(dis);

					this.Q = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.R = null;
					} else {
						this.R = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.S = null;
					} else {
						this.S = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readFloat();
					}

					this.U = readInteger(dis);

					this.V = readInteger(dis);

					this.W = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// Integer

				writeInteger(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// String

				writeString(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

				// String

				writeString(this.I, dos);

				// Integer

				writeInteger(this.J, dos);

				// Integer

				writeInteger(this.K, dos);

				// String

				writeString(this.L, dos);

				// Integer

				writeInteger(this.M, dos);

				// Float

				if (this.N == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.N);
				}

				// String

				writeString(this.O, dos);

				// String

				writeString(this.P, dos);

				// Integer

				writeInteger(this.Q, dos);

				// Float

				if (this.R == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.R);
				}

				// Float

				if (this.S == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.S);
				}

				// Float

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.T);
				}

				// Integer

				writeInteger(this.U, dos);

				// Integer

				writeInteger(this.V, dos);

				// Integer

				writeInteger(this.W, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + String.valueOf(B));
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + F);
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append(",I=" + I);
			sb.append(",J=" + String.valueOf(J));
			sb.append(",K=" + String.valueOf(K));
			sb.append(",L=" + L);
			sb.append(",M=" + String.valueOf(M));
			sb.append(",N=" + String.valueOf(N));
			sb.append(",O=" + O);
			sb.append(",P=" + P);
			sb.append(",Q=" + String.valueOf(Q));
			sb.append(",R=" + String.valueOf(R));
			sb.append(",S=" + String.valueOf(S));
			sb.append(",T=" + String.valueOf(T));
			sb.append(",U=" + String.valueOf(U));
			sb.append(",V=" + String.valueOf(V));
			sb.append(",W=" + String.valueOf(W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				out02Struct out02 = new out02Struct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "items_temp";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_2;
				}
				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "items_temp"
						+ "` (`id`,`year`,`month`,`city`,`group`,`make`,`premium_segment`,`model_gnr`,`model`,`segment`,`ckd_cbu`,`pc_cv`,`engine_type`,`type`,`displacement`,`sales`,`origine`,`body_type`,`rsp`,`suv_type`,`price_class`,`log_id`,`type_vh`,`status`,`created_at`,`updated_at`,`nb_portes`,`nb_places`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_2 = 100;
				int batchSizeCounter_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out02Struct out02_tmp = new out02Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_2.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_2.setEncoding("UTF-8");

				Object source_tFileInputExcel_2 = "C:/wamp/www/aivam/public/files/"
						+ context.file_brute;
				final jxl.Workbook workbook_tFileInputExcel_2;

				java.io.InputStream toClose_tFileInputExcel_2 = null;
				try {
					if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_2 = (java.io.InputStream) source_tFileInputExcel_2;
						workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_2),
								workbookSettings_tFileInputExcel_2);
					} else if (source_tFileInputExcel_2 instanceof String) {
						toClose_tFileInputExcel_2 = new java.io.FileInputStream(
								source_tFileInputExcel_2.toString());
						workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_2),
								workbookSettings_tFileInputExcel_2);
					} else {
						workbook_tFileInputExcel_2 = null;

						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					if (toClose_tFileInputExcel_2 != null) {
						toClose_tFileInputExcel_2.close();
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_2
							.addAll(regexUtil_tFileInputExcel_2.getSheets(
									workbook_tFileInputExcel_2, "Brut Vul",
									false));
					if (sheetList_tFileInputExcel_2.size() <= 0) {

						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_2
									.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheet_FilterNullList_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += sheet_tFileInputExcel_2
									.getRows();
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_2 = null;
						jxl.Sheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_2 = df_tFileInputExcel_2
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1
									&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2
									+ currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRows();
							}
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2
												- rowCount_tFileInputExcel_2);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET",
									sheet_tFileInputExcel_2.getName());
							row2 = null;
							String[] temp_row_tFileInputExcel_2 = new String[23];
							int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > row_tFileInputExcel_2.length ? row_tFileInputExcel_2.length
									: end_column_tFileInputExcel_2;
							for (int i = 0; i < 23; i++) {

								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {

									jxl.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2[i
											+ start_column_tFileInputExcel_2];
									temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
											.getContents();

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_2 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								if (temp_row_tFileInputExcel_2[0].length() > 0) {
									curColNum_tFileInputExcel_2 = 0 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "A";
									row2.A = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[0]);
								} else {
									row2.A = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[1].length() > 0) {
									curColNum_tFileInputExcel_2 = 1 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "B";
									row2.B = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[1]);
								} else {
									row2.B = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[2].length() > 0) {
									curColNum_tFileInputExcel_2 = 2 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "C";
									row2.C = temp_row_tFileInputExcel_2[2];
								} else {
									row2.C = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[3].length() > 0) {
									curColNum_tFileInputExcel_2 = 3 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "D";
									row2.D = temp_row_tFileInputExcel_2[3];
								} else {
									row2.D = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[4].length() > 0) {
									curColNum_tFileInputExcel_2 = 4 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "E";
									row2.E = temp_row_tFileInputExcel_2[4];
								} else {
									row2.E = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[5].length() > 0) {
									curColNum_tFileInputExcel_2 = 5 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "F";
									row2.F = temp_row_tFileInputExcel_2[5];
								} else {
									row2.F = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[6].length() > 0) {
									curColNum_tFileInputExcel_2 = 6 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "G";
									row2.G = temp_row_tFileInputExcel_2[6];
								} else {
									row2.G = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[7].length() > 0) {
									curColNum_tFileInputExcel_2 = 7 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "H";
									row2.H = temp_row_tFileInputExcel_2[7];
								} else {
									row2.H = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[8].length() > 0) {
									curColNum_tFileInputExcel_2 = 8 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "I";
									row2.I = temp_row_tFileInputExcel_2[8];
								} else {
									row2.I = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[9].length() > 0) {
									curColNum_tFileInputExcel_2 = 9 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "J";
									row2.J = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[9]);
								} else {
									row2.J = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[10].length() > 0) {
									curColNum_tFileInputExcel_2 = 10 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "K";
									row2.K = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[10]);
								} else {
									row2.K = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[11].length() > 0) {
									curColNum_tFileInputExcel_2 = 11 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "L";
									row2.L = temp_row_tFileInputExcel_2[11];
								} else {
									row2.L = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[12].length() > 0) {
									curColNum_tFileInputExcel_2 = 12 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "M";
									row2.M = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[12]);
								} else {
									row2.M = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[13].length() > 0) {
									curColNum_tFileInputExcel_2 = 13 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "N";
									row2.N = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[13]);
								} else {
									row2.N = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[14].length() > 0) {
									curColNum_tFileInputExcel_2 = 14 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "O";
									row2.O = temp_row_tFileInputExcel_2[14];
								} else {
									row2.O = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[15].length() > 0) {
									curColNum_tFileInputExcel_2 = 15 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "P";
									row2.P = temp_row_tFileInputExcel_2[15];
								} else {
									row2.P = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[16].length() > 0) {
									curColNum_tFileInputExcel_2 = 16 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Q";
									row2.Q = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[16]);
								} else {
									row2.Q = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[17].length() > 0) {
									curColNum_tFileInputExcel_2 = 17 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "R";
									row2.R = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[17]);
								} else {
									row2.R = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[18].length() > 0) {
									curColNum_tFileInputExcel_2 = 18 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "S";
									row2.S = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[18]);
								} else {
									row2.S = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[19].length() > 0) {
									curColNum_tFileInputExcel_2 = 19 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "T";
									row2.T = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[19]);
								} else {
									row2.T = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[20].length() > 0) {
									curColNum_tFileInputExcel_2 = 20 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "U";
									row2.U = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[20]);
								} else {
									row2.U = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[21].length() > 0) {
									curColNum_tFileInputExcel_2 = 21 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "V";
									row2.V = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[21]);
								} else {
									row2.V = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[22].length() > 0) {
									curColNum_tFileInputExcel_2 = 22 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "W";
									row2.W = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[22]);
								} else {
									row2.W = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */
							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									out02 = null;

									// # Output table : 'out02'
									out02_tmp.id = 0;
									out02_tmp.year = row2.A;
									out02_tmp.month = row2.B;
									out02_tmp.city = row2.C;
									out02_tmp.group = "0";
									out02_tmp.make = row2.D;
									out02_tmp.premium_segment = "0";
									out02_tmp.model_gnr = "0";
									out02_tmp.model = row2.E;
									out02_tmp.segment = "0";
									out02_tmp.ckd_cbu = row2.G;
									out02_tmp.pc_cv = "CV";
									out02_tmp.engine_type = row2.P;
									out02_tmp.type = row2.F;
									out02_tmp.displacement = row2.Q;
									out02_tmp.sales = row2.W;
									out02_tmp.origine = "0";
									out02_tmp.body_type = "0";
									out02_tmp.rsp = row2.V;
									out02_tmp.suv_type = "0";
									out02_tmp.price_class = "0";
									out02_tmp.log_id = context.log_id;
									out02_tmp.type_vh = "VUL";
									out02_tmp.status = "ko";
									out02_tmp.created_at = null;
									out02_tmp.updated_at = null;
									out02_tmp.nb_portes = row2.J;
									out02_tmp.nb_places = row2.K;
									out02 = out02_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "out02"
								if (out02 != null) {

									/**
									 * [tMysqlOutput_2 main ] start
									 */

									currentComponent = "tMysqlOutput_2";

									whetherReject_tMysqlOutput_2 = false;
									pstmt_tMysqlOutput_2.setLong(1, out02.id);

									pstmt_tMysqlOutput_2.setInt(2, out02.year);

									pstmt_tMysqlOutput_2.setInt(3, out02.month);

									if (out02.city == null) {
										pstmt_tMysqlOutput_2.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(4,
												out02.city);
									}

									if (out02.group == null) {
										pstmt_tMysqlOutput_2.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(5,
												out02.group);
									}

									if (out02.make == null) {
										pstmt_tMysqlOutput_2.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(6,
												out02.make);
									}

									if (out02.premium_segment == null) {
										pstmt_tMysqlOutput_2.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(7,
												out02.premium_segment);
									}

									if (out02.model_gnr == null) {
										pstmt_tMysqlOutput_2.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(8,
												out02.model_gnr);
									}

									if (out02.model == null) {
										pstmt_tMysqlOutput_2.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(9,
												out02.model);
									}

									if (out02.segment == null) {
										pstmt_tMysqlOutput_2.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(10,
												out02.segment);
									}

									if (out02.ckd_cbu == null) {
										pstmt_tMysqlOutput_2.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(11,
												out02.ckd_cbu);
									}

									if (out02.pc_cv == null) {
										pstmt_tMysqlOutput_2.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(12,
												out02.pc_cv);
									}

									if (out02.engine_type == null) {
										pstmt_tMysqlOutput_2.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(13,
												out02.engine_type);
									}

									if (out02.type == null) {
										pstmt_tMysqlOutput_2.setNull(14,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(14,
												out02.type);
									}

									pstmt_tMysqlOutput_2.setInt(15,
											out02.displacement);

									pstmt_tMysqlOutput_2
											.setInt(16, out02.sales);

									if (out02.origine == null) {
										pstmt_tMysqlOutput_2.setNull(17,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(17,
												out02.origine);
									}

									if (out02.body_type == null) {
										pstmt_tMysqlOutput_2.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(18,
												out02.body_type);
									}

									pstmt_tMysqlOutput_2.setInt(19, out02.rsp);

									if (out02.suv_type == null) {
										pstmt_tMysqlOutput_2.setNull(20,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(20,
												out02.suv_type);
									}

									if (out02.price_class == null) {
										pstmt_tMysqlOutput_2.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(21,
												out02.price_class);
									}

									pstmt_tMysqlOutput_2.setInt(22,
											out02.log_id);

									if (out02.type_vh == null) {
										pstmt_tMysqlOutput_2.setNull(23,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(23,
												out02.type_vh);
									}

									if (out02.status == null) {
										pstmt_tMysqlOutput_2.setNull(24,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_2.setString(24,
												out02.status);
									}

									if (out02.created_at == null) {
										pstmt_tMysqlOutput_2.setNull(25,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_2.setInt(25,
												out02.created_at);
									}

									if (out02.updated_at == null) {
										pstmt_tMysqlOutput_2.setNull(26,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_2.setInt(26,
												out02.updated_at);
									}

									if (out02.nb_portes == null) {
										pstmt_tMysqlOutput_2.setNull(27,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_2.setInt(27,
												out02.nb_portes);
									}

									if (out02.nb_places == null) {
										pstmt_tMysqlOutput_2.setNull(28,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tMysqlOutput_2.setInt(28,
												out02.nb_places);
									}

									pstmt_tMysqlOutput_2.addBatch();
									nb_line_tMysqlOutput_2++;

									batchSizeCounter_tMysqlOutput_2++;

									if (batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
										try {
											int countSum_tMysqlOutput_2 = 0;
											for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
													.executeBatch()) {
												countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
														: 1);
											}

											insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tMysqlOutput_2 = 0;
											for (int countEach_tMysqlOutput_2 : e
													.getUpdateCounts()) {
												countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
														: countEach_tMysqlOutput_2);
											}

											insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

											System.err.println(e.getMessage());

										}

										batchSizeCounter_tMysqlOutput_2 = 0;
									}

									commitCounter_tMysqlOutput_2++;

									if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

										try {
											int countSum_tMysqlOutput_2 = 0;

											for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
													.executeBatch()) {
												countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
														: 1);
											}

											insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tMysqlOutput_2 = 0;
											for (int countEach_tMysqlOutput_2 : e
													.getUpdateCounts()) {
												countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
														: countEach_tMysqlOutput_2);
											}

											insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

											System.out.println(e.getMessage());

										}

										conn_tMysqlOutput_2.commit();

										commitCounter_tMysqlOutput_2 = 0;

									}

									tos_count_tMysqlOutput_2++;

									/**
									 * [tMysqlOutput_2 main ] stop
									 */

								} // End of branch "out02"

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE",
								nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.close();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (batchSizeCounter_tMysqlOutput_2 != 0) {
						int countSum_tMysqlOutput_2 = 0;
						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_2 = 0;

				try {
					if (pstmt_tMysqlOutput_2 != null) {
						int countSum_tMysqlOutput_2 = 0;

						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();
				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;
				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							System.out
									.println("failed to close the connection in tMysqlOutput_2 :"
											+ sqlEx_tMysqlOutput_2.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final main_process main_processClass = new main_process();

		int exitCode = main_processClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = main_process.class.getClassLoader()
					.getResourceAsStream(
							"demo_fay/main_process_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.file_brute = (String) context.getProperty("file_brute");
			try {
				context.log_id = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("log_id"));
			} catch (NumberFormatException e) {
				context.log_id = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("file_brute")) {
				context.file_brute = (String) parentContextMap
						.get("file_brute");
			}
			if (parentContextMap.containsKey("log_id")) {
				context.log_id = (Integer) parentContextMap.get("log_id");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_3) {
			globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : main_process");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 139854 characters generated by Talend Open Studio for Data Integration on the
 * November 28, 2015 11:41:04 PM GMT
 ************************************************************************************************/
