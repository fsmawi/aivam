// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package aivam.traited_file_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.GetRandomPhoneNum;
import routines.DemoRoutines;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.Custom;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: traited_file Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class traited_file implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (file_brute != null) {

				this.setProperty("file_brute", file_brute.toString());

			}

			if (log_id != null) {

				this.setProperty("log_id", log_id.toString());

			}

		}

		public String file_brute;

		public String getFile_brute() {
			return this.file_brute;
		}

		public Integer log_id;

		public Integer getLog_id() {
			return this.log_id;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "traited_file";
	private final String projectName = "AIVAM";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					traited_file.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(traited_file.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class outStruct implements
			routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_AIVAM_traited_file = new byte[0];
		static byte[] commonByteArray_AIVAM_traited_file = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;

		}

		public void copyKeysDataTo(outStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIVAM_traited_file.length) {
					if (length < 1024
							&& commonByteArray_AIVAM_traited_file.length == 0) {
						commonByteArray_AIVAM_traited_file = new byte[1024];
					} else {
						commonByteArray_AIVAM_traited_file = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIVAM_traited_file, 0, length);
				strReturn = new String(commonByteArray_AIVAM_traited_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIVAM_traited_file) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AIVAM_traited_file = new byte[0];
		static byte[] commonByteArray_AIVAM_traited_file = new byte[0];

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Group;

		public String getGroup() {
			return this.Group;
		}

		public String Make;

		public String getMake() {
			return this.Make;
		}

		public String Premium_segment;

		public String getPremium_segment() {
			return this.Premium_segment;
		}

		public String Model_GNR;

		public String getModel_GNR() {
			return this.Model_GNR;
		}

		public String Model;

		public String getModel() {
			return this.Model;
		}

		public String Segment;

		public String getSegment() {
			return this.Segment;
		}

		public String CKD_CBU;

		public String getCKD_CBU() {
			return this.CKD_CBU;
		}

		public String PC_CV;

		public String getPC_CV() {
			return this.PC_CV;
		}

		public String Engine_Type;

		public String getEngine_Type() {
			return this.Engine_Type;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public Integer Displacement;

		public Integer getDisplacement() {
			return this.Displacement;
		}

		public Integer Sales;

		public Integer getSales() {
			return this.Sales;
		}

		public String Origine;

		public String getOrigine() {
			return this.Origine;
		}

		public String Body_type;

		public String getBody_type() {
			return this.Body_type;
		}

		public Integer RSP;

		public Integer getRSP() {
			return this.RSP;
		}

		public String Price_Class;

		public String getPrice_Class() {
			return this.Price_Class;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIVAM_traited_file.length) {
					if (length < 1024
							&& commonByteArray_AIVAM_traited_file.length == 0) {
						commonByteArray_AIVAM_traited_file = new byte[1024];
					} else {
						commonByteArray_AIVAM_traited_file = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIVAM_traited_file, 0, length);
				strReturn = new String(commonByteArray_AIVAM_traited_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIVAM_traited_file) {

				try {

					int length = 0;

					this.Year = readInteger(dis);

					this.Month = readInteger(dis);

					this.City = readString(dis);

					this.Group = readString(dis);

					this.Make = readString(dis);

					this.Premium_segment = readString(dis);

					this.Model_GNR = readString(dis);

					this.Model = readString(dis);

					this.Segment = readString(dis);

					this.CKD_CBU = readString(dis);

					this.PC_CV = readString(dis);

					this.Engine_Type = readString(dis);

					this.Type = readString(dis);

					this.Displacement = readInteger(dis);

					this.Sales = readInteger(dis);

					this.Origine = readString(dis);

					this.Body_type = readString(dis);

					this.RSP = readInteger(dis);

					this.Price_Class = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.Month, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.Group, dos);

				// String

				writeString(this.Make, dos);

				// String

				writeString(this.Premium_segment, dos);

				// String

				writeString(this.Model_GNR, dos);

				// String

				writeString(this.Model, dos);

				// String

				writeString(this.Segment, dos);

				// String

				writeString(this.CKD_CBU, dos);

				// String

				writeString(this.PC_CV, dos);

				// String

				writeString(this.Engine_Type, dos);

				// String

				writeString(this.Type, dos);

				// Integer

				writeInteger(this.Displacement, dos);

				// Integer

				writeInteger(this.Sales, dos);

				// String

				writeString(this.Origine, dos);

				// String

				writeString(this.Body_type, dos);

				// Integer

				writeInteger(this.RSP, dos);

				// String

				writeString(this.Price_Class, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + String.valueOf(Year));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",City=" + City);
			sb.append(",Group=" + Group);
			sb.append(",Make=" + Make);
			sb.append(",Premium_segment=" + Premium_segment);
			sb.append(",Model_GNR=" + Model_GNR);
			sb.append(",Model=" + Model);
			sb.append(",Segment=" + Segment);
			sb.append(",CKD_CBU=" + CKD_CBU);
			sb.append(",PC_CV=" + PC_CV);
			sb.append(",Engine_Type=" + Engine_Type);
			sb.append(",Type=" + Type);
			sb.append(",Displacement=" + String.valueOf(Displacement));
			sb.append(",Sales=" + String.valueOf(Sales));
			sb.append(",Origine=" + Origine);
			sb.append(",Body_type=" + Body_type);
			sb.append(",RSP=" + String.valueOf(RSP));
			sb.append(",Price_Class=" + Price_Class);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outStruct out = new outStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "items";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "items"
								+ "` WHERE `id` = ?");
				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "items"
						+ "` (`id`,`year`,`month`,`city`,`group`,`make`,`premium_segment`,`model_gnr`,`model`,`segment`,`ckd_cbu`,`pc_cv`,`engine_type`,`type`,`displacement`,`sales`,`origine`,`body_type`,`rsp`,`suv_type`,`price_class`,`log_id`,`type_vh`,`status`,`created_at`,`updated_at`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);
				String update_tMysqlOutput_1 = "UPDATE `"
						+ "items"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outStruct out_tmp = new outStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-2");

				Object source_tFileInputExcel_1 = "C:/wamp/www/aivam/public/files/"
						+ context.file_brute;
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_1),
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(
								source_tFileInputExcel_1.toString());
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								new java.io.BufferedInputStream(
										toClose_tFileInputExcel_1),
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;

						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					if (toClose_tFileInputExcel_1 != null) {
						toClose_tFileInputExcel_1.close();
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays
							.<jxl.Sheet> asList(workbook_tFileInputExcel_1
									.getSheets());
					if (sheetList_tFileInputExcel_1.size() <= 0) {

						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1
									.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getName());
							row1 = null;
							String[] temp_row_tFileInputExcel_1 = new String[19];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;
							for (int i = 0; i < 19; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
											.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								if (temp_row_tFileInputExcel_1[0].length() > 0) {
									curColNum_tFileInputExcel_1 = 0 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Year";
									row1.Year = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[0],
															',', '.'));
								} else {
									row1.Year = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[1].length() > 0) {
									curColNum_tFileInputExcel_1 = 1 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Month";
									row1.Month = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[1],
															',', '.'));
								} else {
									row1.Month = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[2].length() > 0) {
									curColNum_tFileInputExcel_1 = 2 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "City";
									row1.City = temp_row_tFileInputExcel_1[2];
								} else {
									row1.City = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[3].length() > 0) {
									curColNum_tFileInputExcel_1 = 3 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Group";
									row1.Group = temp_row_tFileInputExcel_1[3];
								} else {
									row1.Group = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[4].length() > 0) {
									curColNum_tFileInputExcel_1 = 4 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Make";
									row1.Make = temp_row_tFileInputExcel_1[4];
								} else {
									row1.Make = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[5].length() > 0) {
									curColNum_tFileInputExcel_1 = 5 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Premium_segment";
									row1.Premium_segment = temp_row_tFileInputExcel_1[5];
								} else {
									row1.Premium_segment = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[6].length() > 0) {
									curColNum_tFileInputExcel_1 = 6 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Model_GNR";
									row1.Model_GNR = temp_row_tFileInputExcel_1[6];
								} else {
									row1.Model_GNR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[7].length() > 0) {
									curColNum_tFileInputExcel_1 = 7 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Model";
									row1.Model = temp_row_tFileInputExcel_1[7];
								} else {
									row1.Model = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[8].length() > 0) {
									curColNum_tFileInputExcel_1 = 8 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Segment";
									row1.Segment = temp_row_tFileInputExcel_1[8];
								} else {
									row1.Segment = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[9].length() > 0) {
									curColNum_tFileInputExcel_1 = 9 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CKD_CBU";
									row1.CKD_CBU = temp_row_tFileInputExcel_1[9];
								} else {
									row1.CKD_CBU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[10].length() > 0) {
									curColNum_tFileInputExcel_1 = 10 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "PC_CV";
									row1.PC_CV = temp_row_tFileInputExcel_1[10];
								} else {
									row1.PC_CV = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[11].length() > 0) {
									curColNum_tFileInputExcel_1 = 11 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Engine_Type";
									row1.Engine_Type = temp_row_tFileInputExcel_1[11];
								} else {
									row1.Engine_Type = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[12].length() > 0) {
									curColNum_tFileInputExcel_1 = 12 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Type";
									row1.Type = temp_row_tFileInputExcel_1[12];
								} else {
									row1.Type = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[13].length() > 0) {
									curColNum_tFileInputExcel_1 = 13 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Displacement";
									row1.Displacement = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[13],
															',', '.'));
								} else {
									row1.Displacement = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[14].length() > 0) {
									curColNum_tFileInputExcel_1 = 14 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Sales";
									row1.Sales = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[14],
															',', '.'));
								} else {
									row1.Sales = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[15].length() > 0) {
									curColNum_tFileInputExcel_1 = 15 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Origine";
									row1.Origine = temp_row_tFileInputExcel_1[15];
								} else {
									row1.Origine = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[16].length() > 0) {
									curColNum_tFileInputExcel_1 = 16 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Body_type";
									row1.Body_type = temp_row_tFileInputExcel_1[16];
								} else {
									row1.Body_type = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[17].length() > 0) {
									curColNum_tFileInputExcel_1 = 17 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "RSP";
									row1.RSP = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[17],
															',', '.'));
								} else {
									row1.RSP = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[18].length() > 0) {
									curColNum_tFileInputExcel_1 = 18 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Price_Class";
									row1.Price_Class = temp_row_tFileInputExcel_1[18];
								} else {
									row1.Price_Class = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */
							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out = null;

									// # Output table : 'out'
									out_tmp.id = 0;
									out_tmp.year = row1.Year;
									out_tmp.month = row1.Month;
									out_tmp.city = row1.City;
									out_tmp.group = row1.Group;
									out_tmp.make = row1.Make;
									out_tmp.premium_segment = row1.Premium_segment;
									out_tmp.model_gnr = row1.Model_GNR;
									out_tmp.model = row1.Model;
									out_tmp.segment = row1.Segment;
									out_tmp.ckd_cbu = row1.CKD_CBU;
									out_tmp.pc_cv = row1.PC_CV;
									out_tmp.engine_type = row1.Engine_Type;
									out_tmp.type = row1.Type;
									out_tmp.displacement = row1.Displacement;
									out_tmp.sales = row1.Sales;
									out_tmp.origine = row1.Origine;
									out_tmp.body_type = row1.Body_type;
									out_tmp.rsp = row1.RSP;
									out_tmp.suv_type = null;
									out_tmp.price_class = row1.Price_Class;
									out_tmp.log_id = context.log_id;
									out_tmp.type_vh = null;
									out_tmp.status = "ok";
									out_tmp.created_at = null;
									out_tmp.updated_at = null;
									out = out_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "out"
								if (out != null) {

									/**
									 * [tMysqlOutput_1 main ] start
									 */

									currentComponent = "tMysqlOutput_1";

									whetherReject_tMysqlOutput_1 = false;

									pstmt_tMysqlOutput_1.setLong(1, out.id);

									java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1
											.executeQuery();
									int checkCount_tMysqlOutput_1 = -1;
									while (rs_tMysqlOutput_1.next()) {
										checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1
												.getInt(1);
									}
									if (checkCount_tMysqlOutput_1 > 0) {

										pstmtUpdate_tMysqlOutput_1.setInt(1,
												out.year);

										pstmtUpdate_tMysqlOutput_1.setInt(2,
												out.month);

										if (out.city == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(3, out.city);
										}

										if (out.group == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(4, out.group);
										}

										if (out.make == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(5, out.make);
										}

										if (out.premium_segment == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(6,
															out.premium_segment);
										}

										if (out.model_gnr == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(7, out.model_gnr);
										}

										if (out.model == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(8, out.model);
										}

										if (out.segment == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(9, out.segment);
										}

										if (out.ckd_cbu == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(10, out.ckd_cbu);
										}

										if (out.pc_cv == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(11, out.pc_cv);
										}

										if (out.engine_type == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(12,
															out.engine_type);
										}

										if (out.type == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(13, out.type);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(14,
												out.displacement);

										pstmtUpdate_tMysqlOutput_1.setInt(15,
												out.sales);

										if (out.origine == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(16, out.origine);
										}

										if (out.body_type == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(17,
															out.body_type);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(18,
												out.rsp);

										if (out.suv_type == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													19, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(19, out.suv_type);
										}

										if (out.price_class == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(20,
															out.price_class);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(21,
												out.log_id);

										if (out.type_vh == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(22, out.type_vh);
										}

										if (out.status == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(23, out.status);
										}

										if (out.created_at == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													24, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													24, out.created_at);
										}

										if (out.updated_at == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													25, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													25, out.updated_at);
										}

										pstmtUpdate_tMysqlOutput_1.setLong(
												26 + count_tMysqlOutput_1,
												out.id);

										try {
											updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
													+ pstmtUpdate_tMysqlOutput_1
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
									} else {

										pstmtInsert_tMysqlOutput_1.setLong(1,
												out.id);

										pstmtInsert_tMysqlOutput_1.setInt(2,
												out.year);

										pstmtInsert_tMysqlOutput_1.setInt(3,
												out.month);

										if (out.city == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(4, out.city);
										}

										if (out.group == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(5, out.group);
										}

										if (out.make == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(6, out.make);
										}

										if (out.premium_segment == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(7,
															out.premium_segment);
										}

										if (out.model_gnr == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(8, out.model_gnr);
										}

										if (out.model == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(9, out.model);
										}

										if (out.segment == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(10, out.segment);
										}

										if (out.ckd_cbu == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(11, out.ckd_cbu);
										}

										if (out.pc_cv == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(12, out.pc_cv);
										}

										if (out.engine_type == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(13,
															out.engine_type);
										}

										if (out.type == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(14, out.type);
										}

										pstmtInsert_tMysqlOutput_1.setInt(15,
												out.displacement);

										pstmtInsert_tMysqlOutput_1.setInt(16,
												out.sales);

										if (out.origine == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(17, out.origine);
										}

										if (out.body_type == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													18, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(18,
															out.body_type);
										}

										pstmtInsert_tMysqlOutput_1.setInt(19,
												out.rsp);

										if (out.suv_type == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(20, out.suv_type);
										}

										if (out.price_class == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(21,
															out.price_class);
										}

										pstmtInsert_tMysqlOutput_1.setInt(22,
												out.log_id);

										if (out.type_vh == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(23, out.type_vh);
										}

										if (out.status == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(24, out.status);
										}

										if (out.created_at == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													25, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													25, out.created_at);
										}

										if (out.updated_at == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													26, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													26, out.updated_at);
										}

										try {
											insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
													+ pstmtInsert_tMysqlOutput_1
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
									}
									nb_line_tMysqlOutput_1++;

									commitCounter_tMysqlOutput_1++;

									if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

										conn_tMysqlOutput_1.commit();

										commitCounter_tMysqlOutput_1 = 0;

									}

									tos_count_tMysqlOutput_1++;

									/**
									 * [tMysqlOutput_1 main ] stop
									 */

								} // End of branch "out"

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmtUpdate_tMysqlOutput_1 != null) {

					pstmtUpdate_tMysqlOutput_1.close();

				}
				if (pstmtInsert_tMysqlOutput_1 != null) {

					pstmtInsert_tMysqlOutput_1.close();

				}
				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();
				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;
				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							System.out
									.println("failed to close the connection in tMysqlOutput_1 :"
											+ sqlEx_tMysqlOutput_1.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final traited_file traited_fileClass = new traited_file();

		int exitCode = traited_fileClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = traited_file.class.getClassLoader()
					.getResourceAsStream(
							"aivam/traited_file_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.file_brute = (String) context.getProperty("file_brute");
			try {
				context.log_id = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("log_id"));
			} catch (NumberFormatException e) {
				context.log_id = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("file_brute")) {
				context.file_brute = (String) parentContextMap
						.get("file_brute");
			}
			if (parentContextMap.containsKey("log_id")) {
				context.log_id = (Integer) parentContextMap.get("log_id");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : traited_file");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 76843 characters generated by Talend Open Studio for Data Integration on the
 * December 17, 2015 8:26:20 PM GMT
 ************************************************************************************************/
