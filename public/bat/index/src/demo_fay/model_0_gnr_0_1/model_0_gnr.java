// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo_fay.model_0_gnr_0_1;

import routines.DataOperation;
import routines.DqStringHandling;
import routines.GetRandomPhoneNum;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MDM;
import routines.DQTechnical;
import routines.Mathematical;
import routines.Relational;
import routines.DemoRoutines;
import routines.TalendDate;
import routines.SQLike;
import routines.DataQuality;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: model_0_gnr Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class model_0_gnr implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "model_0_gnr";
	private final String projectName = "DEMO_FAY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					model_0_gnr.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(model_0_gnr.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_model_0_gnr = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_model_0_gnr = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		public Integer nb_portes;

		public Integer getNb_portes() {
			return this.nb_portes;
		}

		public Integer nb_places;

		public Integer getNb_places() {
			return this.nb_places;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.id = this.id;
			other.year = this.year;
			other.month = this.month;
			other.city = this.city;
			other.group = this.group;
			other.make = this.make;
			other.premium_segment = this.premium_segment;
			other.model_gnr = this.model_gnr;
			other.model = this.model;
			other.segment = this.segment;
			other.ckd_cbu = this.ckd_cbu;
			other.pc_cv = this.pc_cv;
			other.engine_type = this.engine_type;
			other.type = this.type;
			other.displacement = this.displacement;
			other.sales = this.sales;
			other.origine = this.origine;
			other.body_type = this.body_type;
			other.rsp = this.rsp;
			other.suv_type = this.suv_type;
			other.price_class = this.price_class;
			other.log_id = this.log_id;
			other.type_vh = this.type_vh;
			other.status = this.status;
			other.created_at = this.created_at;
			other.updated_at = this.updated_at;
			other.nb_portes = this.nb_portes;
			other.nb_places = this.nb_places;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_model_0_gnr.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_model_0_gnr.length == 0) {
						commonByteArray_DEMO_FAY_model_0_gnr = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_model_0_gnr = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_model_0_gnr, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_model_0_gnr, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_model_0_gnr) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

					this.nb_portes = readInteger(dis);

					this.nb_places = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

				// Integer

				writeInteger(this.nb_portes, dos);

				// Integer

				writeInteger(this.nb_places, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append(",nb_portes=" + String.valueOf(nb_portes));
			sb.append(",nb_places=" + String.valueOf(nb_places));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_FAY_model_0_gnr = new byte[0];
		static byte[] commonByteArray_DEMO_FAY_model_0_gnr = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String group;

		public String getGroup() {
			return this.group;
		}

		public String make;

		public String getMake() {
			return this.make;
		}

		public String premium_segment;

		public String getPremium_segment() {
			return this.premium_segment;
		}

		public String model_gnr;

		public String getModel_gnr() {
			return this.model_gnr;
		}

		public String model;

		public String getModel() {
			return this.model;
		}

		public String segment;

		public String getSegment() {
			return this.segment;
		}

		public String ckd_cbu;

		public String getCkd_cbu() {
			return this.ckd_cbu;
		}

		public String pc_cv;

		public String getPc_cv() {
			return this.pc_cv;
		}

		public String engine_type;

		public String getEngine_type() {
			return this.engine_type;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int displacement;

		public int getDisplacement() {
			return this.displacement;
		}

		public int sales;

		public int getSales() {
			return this.sales;
		}

		public String origine;

		public String getOrigine() {
			return this.origine;
		}

		public String body_type;

		public String getBody_type() {
			return this.body_type;
		}

		public int rsp;

		public int getRsp() {
			return this.rsp;
		}

		public String suv_type;

		public String getSuv_type() {
			return this.suv_type;
		}

		public String price_class;

		public String getPrice_class() {
			return this.price_class;
		}

		public int log_id;

		public int getLog_id() {
			return this.log_id;
		}

		public String type_vh;

		public String getType_vh() {
			return this.type_vh;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer created_at;

		public Integer getCreated_at() {
			return this.created_at;
		}

		public Integer updated_at;

		public Integer getUpdated_at() {
			return this.updated_at;
		}

		public Integer nb_portes;

		public Integer getNb_portes() {
			return this.nb_portes;
		}

		public Integer nb_places;

		public Integer getNb_places() {
			return this.nb_places;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_FAY_model_0_gnr.length) {
					if (length < 1024
							&& commonByteArray_DEMO_FAY_model_0_gnr.length == 0) {
						commonByteArray_DEMO_FAY_model_0_gnr = new byte[1024];
					} else {
						commonByteArray_DEMO_FAY_model_0_gnr = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_FAY_model_0_gnr, 0, length);
				strReturn = new String(commonByteArray_DEMO_FAY_model_0_gnr, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_FAY_model_0_gnr) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.year = dis.readInt();

					this.month = dis.readInt();

					this.city = readString(dis);

					this.group = readString(dis);

					this.make = readString(dis);

					this.premium_segment = readString(dis);

					this.model_gnr = readString(dis);

					this.model = readString(dis);

					this.segment = readString(dis);

					this.ckd_cbu = readString(dis);

					this.pc_cv = readString(dis);

					this.engine_type = readString(dis);

					this.type = readString(dis);

					this.displacement = dis.readInt();

					this.sales = dis.readInt();

					this.origine = readString(dis);

					this.body_type = readString(dis);

					this.rsp = dis.readInt();

					this.suv_type = readString(dis);

					this.price_class = readString(dis);

					this.log_id = dis.readInt();

					this.type_vh = readString(dis);

					this.status = readString(dis);

					this.created_at = readInteger(dis);

					this.updated_at = readInteger(dis);

					this.nb_portes = readInteger(dis);

					this.nb_places = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// int

				dos.writeInt(this.year);

				// int

				dos.writeInt(this.month);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.group, dos);

				// String

				writeString(this.make, dos);

				// String

				writeString(this.premium_segment, dos);

				// String

				writeString(this.model_gnr, dos);

				// String

				writeString(this.model, dos);

				// String

				writeString(this.segment, dos);

				// String

				writeString(this.ckd_cbu, dos);

				// String

				writeString(this.pc_cv, dos);

				// String

				writeString(this.engine_type, dos);

				// String

				writeString(this.type, dos);

				// int

				dos.writeInt(this.displacement);

				// int

				dos.writeInt(this.sales);

				// String

				writeString(this.origine, dos);

				// String

				writeString(this.body_type, dos);

				// int

				dos.writeInt(this.rsp);

				// String

				writeString(this.suv_type, dos);

				// String

				writeString(this.price_class, dos);

				// int

				dos.writeInt(this.log_id);

				// String

				writeString(this.type_vh, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.created_at, dos);

				// Integer

				writeInteger(this.updated_at, dos);

				// Integer

				writeInteger(this.nb_portes, dos);

				// Integer

				writeInteger(this.nb_places, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",city=" + city);
			sb.append(",group=" + group);
			sb.append(",make=" + make);
			sb.append(",premium_segment=" + premium_segment);
			sb.append(",model_gnr=" + model_gnr);
			sb.append(",model=" + model);
			sb.append(",segment=" + segment);
			sb.append(",ckd_cbu=" + ckd_cbu);
			sb.append(",pc_cv=" + pc_cv);
			sb.append(",engine_type=" + engine_type);
			sb.append(",type=" + type);
			sb.append(",displacement=" + String.valueOf(displacement));
			sb.append(",sales=" + String.valueOf(sales));
			sb.append(",origine=" + origine);
			sb.append(",body_type=" + body_type);
			sb.append(",rsp=" + String.valueOf(rsp));
			sb.append(",suv_type=" + suv_type);
			sb.append(",price_class=" + price_class);
			sb.append(",log_id=" + String.valueOf(log_id));
			sb.append(",type_vh=" + type_vh);
			sb.append(",status=" + status);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append(",nb_portes=" + String.valueOf(nb_portes));
			sb.append(",nb_places=" + String.valueOf(nb_places));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "items_temp";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "aivam" + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;
				int batchSize_tMysqlOutput_1 = 10000;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String update_tMysqlOutput_1 = "UPDATE `"
						+ "items_temp"
						+ "` SET `year` = ?,`month` = ?,`city` = ?,`group` = ?,`make` = ?,`premium_segment` = ?,`model_gnr` = ?,`model` = ?,`segment` = ?,`ckd_cbu` = ?,`pc_cv` = ?,`engine_type` = ?,`type` = ?,`displacement` = ?,`sales` = ?,`origine` = ?,`body_type` = ?,`rsp` = ?,`suv_type` = ?,`price_class` = ?,`log_id` = ?,`type_vh` = ?,`status` = ?,`created_at` = ?,`updated_at` = ?,`nb_portes` = ?,`nb_places` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("");
				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "aivam" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT \n  `items_temp`.`id`, \n  `items_temp`.`year`, \n  `items_temp`.`month`, \n  `items_temp`.`city`, \n  `items_temp`.`group`, \n  `items_temp`.`make`, \n  `items_temp`.`premium_segment`, \n  `items_temp`.`model_gnr`, \n  `items_temp`.`model`, \n  `items_temp`.`segment`, \n  `items_temp`.`ckd_cbu`, \n  `items_temp`.`pc_cv`, \n  `items_temp`.`engine_type`, \n  `items_temp`.`type`, \n  `items_temp`.`displacement`, \n  `items_temp`.`sales`, \n  `items_temp`.`origine`, \n  `items_temp`.`body_type`, \n  `items_temp`.`rsp`, \n  `items_temp`.`suv_type`, \n  `items_temp`.`price_class`, \n  `items_temp`.`log_id`, \n  `items_temp`.`type_vh`, \n  `items_temp`.`status`, \n  `items_temp`.`created_at`, \n  `items_temp`.`updated_at`, \n  `items_temp`.`nb_portes`, \n  `items_temp`.`nb_places`\nFROM `items_temp`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.id = rs_tMysqlInput_1.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.year = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(2) != null) {
								row1.year = rs_tMysqlInput_1.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.month = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(3) != null) {
								row1.month = rs_tMysqlInput_1.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.city = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.city = tmpContent_tMysqlInput_1;
							} else {
								row1.city = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.group = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(5);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.group = tmpContent_tMysqlInput_1;
							} else {
								row1.group = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.make = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(6);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.make = tmpContent_tMysqlInput_1;
							} else {
								row1.make = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.premium_segment = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(7);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.premium_segment = tmpContent_tMysqlInput_1;
							} else {
								row1.premium_segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.model_gnr = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(8);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.model_gnr = tmpContent_tMysqlInput_1;
							} else {
								row1.model_gnr = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.model = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(9);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.model = tmpContent_tMysqlInput_1;
							} else {
								row1.model = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.segment = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(10);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.segment = tmpContent_tMysqlInput_1;
							} else {
								row1.segment = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.ckd_cbu = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(11);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.ckd_cbu = tmpContent_tMysqlInput_1;
							} else {
								row1.ckd_cbu = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 12) {
							row1.pc_cv = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(12);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.pc_cv = tmpContent_tMysqlInput_1;
							} else {
								row1.pc_cv = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 13) {
							row1.engine_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(13);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.engine_type = tmpContent_tMysqlInput_1;
							} else {
								row1.engine_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 14) {
							row1.type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(14);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.type = tmpContent_tMysqlInput_1;
							} else {
								row1.type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 15) {
							row1.displacement = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(15) != null) {
								row1.displacement = rs_tMysqlInput_1.getInt(15);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 16) {
							row1.sales = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(16) != null) {
								row1.sales = rs_tMysqlInput_1.getInt(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 17) {
							row1.origine = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(17);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.origine = tmpContent_tMysqlInput_1;
							} else {
								row1.origine = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 18) {
							row1.body_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(18);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.body_type = tmpContent_tMysqlInput_1;
							} else {
								row1.body_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 19) {
							row1.rsp = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(19) != null) {
								row1.rsp = rs_tMysqlInput_1.getInt(19);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 20) {
							row1.suv_type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(20);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.suv_type = tmpContent_tMysqlInput_1;
							} else {
								row1.suv_type = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 21) {
							row1.price_class = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(21);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.price_class = tmpContent_tMysqlInput_1;
							} else {
								row1.price_class = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 22) {
							row1.log_id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(22) != null) {
								row1.log_id = rs_tMysqlInput_1.getInt(22);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 23) {
							row1.type_vh = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(23);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.type_vh = tmpContent_tMysqlInput_1;
							} else {
								row1.type_vh = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 24) {
							row1.status = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(24);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.status = tmpContent_tMysqlInput_1;
							} else {
								row1.status = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 25) {
							row1.created_at = null;
						} else {

							if (rs_tMysqlInput_1.getObject(25) != null) {
								row1.created_at = rs_tMysqlInput_1.getInt(25);
							} else {
								row1.created_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 26) {
							row1.updated_at = null;
						} else {

							if (rs_tMysqlInput_1.getObject(26) != null) {
								row1.updated_at = rs_tMysqlInput_1.getInt(26);
							} else {
								row1.updated_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 27) {
							row1.nb_portes = null;
						} else {

							if (rs_tMysqlInput_1.getObject(27) != null) {
								row1.nb_portes = rs_tMysqlInput_1.getInt(27);
							} else {
								row1.nb_portes = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 28) {
							row1.nb_places = null;
						} else {

							if (rs_tMysqlInput_1.getObject(28) != null) {
								row1.nb_places = rs_tMysqlInput_1.getInt(28);
							} else {
								row1.nb_places = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */
						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							// # Output table : 'out1'
							out1_tmp.id = row1.id;
							out1_tmp.year = row1.year;
							out1_tmp.month = row1.month;
							out1_tmp.city = row1.city;
							out1_tmp.group = row1.group;
							out1_tmp.make = row1.make;
							out1_tmp.premium_segment = row1.premium_segment;
							out1_tmp.model_gnr = row1.model.substring(
									0,
									(row1.model.length() < 3) ? row1.model
											.length() : 3);
							out1_tmp.model = row1.model;
							out1_tmp.segment = row1.segment;
							out1_tmp.ckd_cbu = row1.ckd_cbu;
							out1_tmp.pc_cv = row1.pc_cv;
							out1_tmp.engine_type = row1.engine_type;
							out1_tmp.type = row1.type;
							out1_tmp.displacement = row1.displacement;
							out1_tmp.sales = row1.sales;
							out1_tmp.origine = row1.origine;
							out1_tmp.body_type = row1.body_type;
							out1_tmp.rsp = row1.rsp;
							out1_tmp.suv_type = row1.suv_type;
							out1_tmp.price_class = row1.price_class;
							out1_tmp.log_id = row1.log_id;
							out1_tmp.type_vh = row1.type_vh;
							out1_tmp.status = row1.status;
							out1_tmp.created_at = row1.created_at;
							out1_tmp.updated_at = row1.updated_at;
							out1_tmp.nb_portes = row1.nb_portes;
							out1_tmp.nb_places = row1.nb_places;
							out1 = out1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setInt(1, out1.year);

							pstmt_tMysqlOutput_1.setInt(2, out1.month);

							if (out1.city == null) {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(3, out1.city);
							}

							if (out1.group == null) {
								pstmt_tMysqlOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(4, out1.group);
							}

							if (out1.make == null) {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(5, out1.make);
							}

							if (out1.premium_segment == null) {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(6,
										out1.premium_segment);
							}

							if (out1.model_gnr == null) {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(7,
										out1.model_gnr);
							}

							if (out1.model == null) {
								pstmt_tMysqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(8, out1.model);
							}

							if (out1.segment == null) {
								pstmt_tMysqlOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(9, out1.segment);
							}

							if (out1.ckd_cbu == null) {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(10, out1.ckd_cbu);
							}

							if (out1.pc_cv == null) {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(11, out1.pc_cv);
							}

							if (out1.engine_type == null) {
								pstmt_tMysqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(12,
										out1.engine_type);
							}

							if (out1.type == null) {
								pstmt_tMysqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(13, out1.type);
							}

							pstmt_tMysqlOutput_1.setInt(14, out1.displacement);

							pstmt_tMysqlOutput_1.setInt(15, out1.sales);

							if (out1.origine == null) {
								pstmt_tMysqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(16, out1.origine);
							}

							if (out1.body_type == null) {
								pstmt_tMysqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(17,
										out1.body_type);
							}

							pstmt_tMysqlOutput_1.setInt(18, out1.rsp);

							if (out1.suv_type == null) {
								pstmt_tMysqlOutput_1.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(19,
										out1.suv_type);
							}

							if (out1.price_class == null) {
								pstmt_tMysqlOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(20,
										out1.price_class);
							}

							pstmt_tMysqlOutput_1.setInt(21, out1.log_id);

							if (out1.type_vh == null) {
								pstmt_tMysqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(22, out1.type_vh);
							}

							if (out1.status == null) {
								pstmt_tMysqlOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(23, out1.status);
							}

							if (out1.created_at == null) {
								pstmt_tMysqlOutput_1.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(24, out1.created_at);
							}

							if (out1.updated_at == null) {
								pstmt_tMysqlOutput_1.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(25, out1.updated_at);
							}

							if (out1.nb_portes == null) {
								pstmt_tMysqlOutput_1.setNull(26,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(26, out1.nb_portes);
							}

							if (out1.nb_places == null) {
								pstmt_tMysqlOutput_1.setNull(27,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(27, out1.nb_places);
							}

							pstmt_tMysqlOutput_1.setLong(
									28 + count_tMysqlOutput_1, out1.id);

							pstmt_tMysqlOutput_1.addBatch();
							nb_line_tMysqlOutput_1++;

							batchSizeCounter_tMysqlOutput_1++;

							if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									batchSizeCounter_tMysqlOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								try {
									int countSum_tMysqlOutput_1 = 0;

									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_1.commit();

								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;

						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();
				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;
				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							System.out
									.println("failed to close the connection in tMysqlOutput_1 :"
											+ sqlEx_tMysqlOutput_1.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final model_0_gnr model_0_gnrClass = new model_0_gnr();

		int exitCode = model_0_gnrClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = model_0_gnr.class.getClassLoader()
					.getResourceAsStream(
							"demo_fay/model_0_gnr_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : model_0_gnr");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 76203 characters generated by Talend Open Studio for Data Integration on the
 * November 3, 2014 4:27:03 PM GMT
 ************************************************************************************************/
